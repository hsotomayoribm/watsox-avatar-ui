{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode, BindOnceFuture } from '@opentelemetry/core';\nimport { configureExporterTimeout } from './util';\n/**\n * Collector Exporter abstract base class\n */\n\nvar OTLPExporterBase =\n/** @class */\nfunction () {\n  /**\n   * @param config\n   */\n  function OTLPExporterBase(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this._sendingPromises = [];\n    this.url = this.getDefaultUrl(config);\n\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._concurrencyLimit = typeof config.concurrencyLimit === 'number' ? config.concurrencyLimit : Infinity;\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis); // platform dependent\n\n    this.onInit(config);\n  }\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n\n\n  OTLPExporterBase.prototype.export = function (items, resultCallback) {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown')\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached')\n      });\n      return;\n    }\n\n    this._export(items).then(function () {\n      resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }).catch(function (error) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: error\n      });\n    });\n  };\n\n  OTLPExporterBase.prototype._export = function (items) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      try {\n        diag.debug('items to be sent', items);\n\n        _this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\n   * Shutdown the exporter.\n   */\n\n\n  OTLPExporterBase.prototype.shutdown = function () {\n    return this._shutdownOnce.call();\n  };\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n\n\n  OTLPExporterBase.prototype._shutdown = function () {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return Promise.all(this._sendingPromises).then(function () {\n      /** ignore resolved values */\n    });\n  };\n\n  return OTLPExporterBase;\n}();\n\nexport { OTLPExporterBase }; //# sourceMappingURL=OTLPExporterBase.js.map","map":null,"metadata":{},"sourceType":"module"}