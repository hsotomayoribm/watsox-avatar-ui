{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '..';\nimport { diag } from '@opentelemetry/api';\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\n\nvar BrowserDetectorSync =\n/** @class */\nfunction () {\n  function BrowserDetectorSync() {}\n\n  BrowserDetectorSync.prototype.detect = function (config) {\n    var _a;\n\n    var isBrowser = typeof navigator !== 'undefined';\n\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n\n    var browserResource = (_a = {}, _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser', _a[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = 'Web Browser', _a[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = navigator.userAgent, _a);\n    return this._getResourceAttributes(browserResource, config);\n  };\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n\n\n  BrowserDetectorSync.prototype._getResourceAttributes = function (browserResource, _config) {\n    if (browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug('BrowserDetector failed: Unable to find required browser resources. ');\n      return Resource.empty();\n    } else {\n      return new Resource(__assign({}, browserResource));\n    }\n  };\n\n  return BrowserDetectorSync;\n}();\n\nexport var browserDetectorSync = new BrowserDetectorSync(); //# sourceMappingURL=BrowserDetectorSync.js.map","map":null,"metadata":{},"sourceType":"module"}