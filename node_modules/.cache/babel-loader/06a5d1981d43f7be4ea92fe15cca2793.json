{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext } from '../trace/spancontext-utils';\nimport { deleteSpan, getActiveSpan, getSpan, getSpanContext, setSpan, setSpanContext } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\n\nvar TraceAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function TraceAPI() {\n    this._proxyTracerProvider = new ProxyTracerProvider();\n    this.wrapSpanContext = wrapSpanContext;\n    this.isSpanContextValid = isSpanContextValid;\n    this.deleteSpan = deleteSpan;\n    this.getSpan = getSpan;\n    this.getActiveSpan = getActiveSpan;\n    this.getSpanContext = getSpanContext;\n    this.setSpan = setSpan;\n    this.setSpanContext = setSpanContext;\n  }\n  /** Get the singleton instance of the Trace API */\n\n\n  TraceAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n\n\n  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n    var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n\n    return success;\n  };\n  /**\n   * Returns the global tracer provider.\n   */\n\n\n  TraceAPI.prototype.getTracerProvider = function () {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  };\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n\n\n  TraceAPI.prototype.getTracer = function (name, version) {\n    return this.getTracerProvider().getTracer(name, version);\n  };\n  /** Remove the global tracer provider */\n\n\n  TraceAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  };\n\n  return TraceAPI;\n}();\n\nexport { TraceAPI }; //# sourceMappingURL=trace.js.map","map":null,"metadata":{},"sourceType":"module"}