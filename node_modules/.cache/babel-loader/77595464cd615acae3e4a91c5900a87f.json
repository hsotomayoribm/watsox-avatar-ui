{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\n/**\n * ProcessDetectorSync will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\n\nvar ProcessDetectorSync =\n/** @class */\nfunction () {\n  function ProcessDetectorSync() {}\n\n  ProcessDetectorSync.prototype.detect = function (config) {\n    var _a; // Skip if not in Node.js environment.\n\n\n    if (typeof process !== 'object') {\n      return Resource.empty();\n    }\n\n    var processResource = (_a = {}, _a[SemanticResourceAttributes.PROCESS_PID] = process.pid, _a[SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME] = process.title || '', _a[SemanticResourceAttributes.PROCESS_COMMAND] = process.argv[1] || '', _a[SemanticResourceAttributes.PROCESS_COMMAND_LINE] = process.argv.join(' ') || '', _a[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = process.versions.node, _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'nodejs', _a[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = 'Node.js', _a);\n    return this._getResourceAttributes(processResource, config);\n  };\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param processResource The unsantized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n\n\n  ProcessDetectorSync.prototype._getResourceAttributes = function (processResource, _config) {\n    if (processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME] === '' || processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH] === '' || processResource[SemanticResourceAttributes.PROCESS_COMMAND] === '' || processResource[SemanticResourceAttributes.PROCESS_COMMAND_LINE] === '' || processResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug('ProcessDetector failed: Unable to find required process resources. ');\n      return Resource.empty();\n    } else {\n      return new Resource(__assign({}, processResource));\n    }\n  };\n\n  return ProcessDetectorSync;\n}();\n\nexport var processDetectorSync = new ProcessDetectorSync(); //# sourceMappingURL=ProcessDetectorSync.js.map","map":null,"metadata":{},"sourceType":"module"}