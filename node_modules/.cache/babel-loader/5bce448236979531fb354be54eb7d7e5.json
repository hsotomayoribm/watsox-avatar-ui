{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as api from '@opentelemetry/api';\nimport { isObservableInstrument } from '../Instruments';\nimport { BatchObservableResultImpl, ObservableResultImpl } from '../ObservableResult';\nimport { callWithTimeout, PromiseAllSettled, isPromiseAllSettledRejectionResult, setEquals } from '../utils';\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\n\nvar ObservableRegistry =\n/** @class */\nfunction () {\n  function ObservableRegistry() {\n    this._callbacks = [];\n    this._batchCallbacks = [];\n  }\n\n  ObservableRegistry.prototype.addCallback = function (callback, instrument) {\n    var idx = this._findCallback(callback, instrument);\n\n    if (idx >= 0) {\n      return;\n    }\n\n    this._callbacks.push({\n      callback: callback,\n      instrument: instrument\n    });\n  };\n\n  ObservableRegistry.prototype.removeCallback = function (callback, instrument) {\n    var idx = this._findCallback(callback, instrument);\n\n    if (idx < 0) {\n      return;\n    }\n\n    this._callbacks.splice(idx, 1);\n  };\n\n  ObservableRegistry.prototype.addBatchCallback = function (callback, instruments) {\n    // Create a set of unique instruments.\n    var observableInstruments = new Set(instruments.filter(isObservableInstrument));\n\n    if (observableInstruments.size === 0) {\n      api.diag.error('BatchObservableCallback is not associated with valid instruments', instruments);\n      return;\n    }\n\n    var idx = this._findBatchCallback(callback, observableInstruments);\n\n    if (idx >= 0) {\n      return;\n    }\n\n    this._batchCallbacks.push({\n      callback: callback,\n      instruments: observableInstruments\n    });\n  };\n\n  ObservableRegistry.prototype.removeBatchCallback = function (callback, instruments) {\n    // Create a set of unique instruments.\n    var observableInstruments = new Set(instruments.filter(isObservableInstrument));\n\n    var idx = this._findBatchCallback(callback, observableInstruments);\n\n    if (idx < 0) {\n      return;\n    }\n\n    this._batchCallbacks.splice(idx, 1);\n  };\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n\n\n  ObservableRegistry.prototype.observe = function (collectionTime, timeoutMillis) {\n    return __awaiter(this, void 0, void 0, function () {\n      var callbackFutures, batchCallbackFutures, results, rejections;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            callbackFutures = this._observeCallbacks(collectionTime, timeoutMillis);\n            batchCallbackFutures = this._observeBatchCallbacks(collectionTime, timeoutMillis);\n            return [4\n            /*yield*/\n            , PromiseAllSettled(__spreadArray(__spreadArray([], __read(callbackFutures), false), __read(batchCallbackFutures), false))];\n\n          case 1:\n            results = _a.sent();\n            rejections = results.filter(isPromiseAllSettledRejectionResult).map(function (it) {\n              return it.reason;\n            });\n            return [2\n            /*return*/\n            , rejections];\n        }\n      });\n    });\n  };\n\n  ObservableRegistry.prototype._observeCallbacks = function (observationTime, timeoutMillis) {\n    var _this = this;\n\n    return this._callbacks.map(function (_a) {\n      var callback = _a.callback,\n          instrument = _a.instrument;\n      return __awaiter(_this, void 0, void 0, function () {\n        var observableResult, callPromise;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              observableResult = new ObservableResultImpl(instrument._descriptor);\n              callPromise = Promise.resolve(callback(observableResult));\n\n              if (timeoutMillis != null) {\n                callPromise = callWithTimeout(callPromise, timeoutMillis);\n              }\n\n              return [4\n              /*yield*/\n              , callPromise];\n\n            case 1:\n              _b.sent();\n\n              instrument._metricStorages.forEach(function (metricStorage) {\n                metricStorage.record(observableResult._buffer, observationTime);\n              });\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  ObservableRegistry.prototype._observeBatchCallbacks = function (observationTime, timeoutMillis) {\n    var _this = this;\n\n    return this._batchCallbacks.map(function (_a) {\n      var callback = _a.callback,\n          instruments = _a.instruments;\n      return __awaiter(_this, void 0, void 0, function () {\n        var observableResult, callPromise;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              observableResult = new BatchObservableResultImpl();\n              callPromise = Promise.resolve(callback(observableResult));\n\n              if (timeoutMillis != null) {\n                callPromise = callWithTimeout(callPromise, timeoutMillis);\n              }\n\n              return [4\n              /*yield*/\n              , callPromise];\n\n            case 1:\n              _b.sent();\n\n              instruments.forEach(function (instrument) {\n                var buffer = observableResult._buffer.get(instrument);\n\n                if (buffer == null) {\n                  return;\n                }\n\n                instrument._metricStorages.forEach(function (metricStorage) {\n                  metricStorage.record(buffer, observationTime);\n                });\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  ObservableRegistry.prototype._findCallback = function (callback, instrument) {\n    return this._callbacks.findIndex(function (record) {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  };\n\n  ObservableRegistry.prototype._findBatchCallback = function (callback, instruments) {\n    return this._batchCallbacks.findIndex(function (record) {\n      return record.callback === callback && setEquals(record.instruments, instruments);\n    });\n  };\n\n  return ObservableRegistry;\n}();\n\nexport { ObservableRegistry }; //# sourceMappingURL=ObservableRegistry.js.map","map":null,"metadata":{},"sourceType":"module"}