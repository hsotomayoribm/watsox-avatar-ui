{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\n\nvar DiagComponentLogger =\n/** @class */\nfunction () {\n  function DiagComponentLogger(props) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  DiagComponentLogger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('debug', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('error', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('info', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('warn', this._namespace, args);\n  };\n\n  DiagComponentLogger.prototype.verbose = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return logProxy('verbose', this._namespace, args);\n  };\n\n  return DiagComponentLogger;\n}();\n\nexport { DiagComponentLogger };\n\nfunction logProxy(funcName, namespace, args) {\n  var logger = getGlobal('diag'); // shortcut if logger not set\n\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName].apply(logger, args);\n} //# sourceMappingURL=ComponentLogger.js.map","map":null,"metadata":{},"sourceType":"module"}