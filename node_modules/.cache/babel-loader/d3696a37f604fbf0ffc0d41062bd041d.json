{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { createInstrumentDescriptorWithView } from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\n/**\n * An internal record for shared meter provider states.\n */\n\nvar MeterSharedState =\n/** @class */\nfunction () {\n  function MeterSharedState(_meterProviderSharedState, _instrumentationScope) {\n    this._meterProviderSharedState = _meterProviderSharedState;\n    this._instrumentationScope = _instrumentationScope;\n    this.metricStorageRegistry = new MetricStorageRegistry();\n    this.observableRegistry = new ObservableRegistry();\n    this.meter = new Meter(this);\n  }\n\n  MeterSharedState.prototype.registerMetricStorage = function (descriptor) {\n    var storages = this._registerMetricStorage(descriptor, SyncMetricStorage);\n\n    if (storages.length === 1) {\n      return storages[0];\n    }\n\n    return new MultiMetricStorage(storages);\n  };\n\n  MeterSharedState.prototype.registerAsyncMetricStorage = function (descriptor) {\n    var storages = this._registerMetricStorage(descriptor, AsyncMetricStorage);\n\n    return storages;\n  };\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @param options options for collection.\n   * @returns the list of metric data collected.\n   */\n\n\n  MeterSharedState.prototype.collect = function (collector, collectionTime, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errors, metricDataList;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.observableRegistry.observe(collectionTime, options === null || options === void 0 ? void 0 : options.timeoutMillis)];\n\n          case 1:\n            errors = _a.sent();\n            metricDataList = Array.from(this.metricStorageRegistry.getStorages(collector)).map(function (metricStorage) {\n              return metricStorage.collect(collector, _this._meterProviderSharedState.metricCollectors, collectionTime);\n            }).filter(isNotNullish);\n            return [2\n            /*return*/\n            , {\n              scopeMetrics: {\n                scope: this._instrumentationScope,\n                metrics: metricDataList.filter(isNotNullish)\n              },\n              errors: errors\n            }];\n        }\n      });\n    });\n  };\n\n  MeterSharedState.prototype._registerMetricStorage = function (descriptor, MetricStorageType) {\n    var _this = this;\n\n    var views = this._meterProviderSharedState.viewRegistry.findViews(descriptor, this._instrumentationScope);\n\n    var storages = views.map(function (view) {\n      var viewDescriptor = createInstrumentDescriptorWithView(view, descriptor);\n\n      var compatibleStorage = _this.metricStorageRegistry.findOrUpdateCompatibleStorage(viewDescriptor);\n\n      if (compatibleStorage != null) {\n        return compatibleStorage;\n      }\n\n      var aggregator = view.aggregation.createAggregator(viewDescriptor);\n      var viewStorage = new MetricStorageType(viewDescriptor, aggregator, view.attributesProcessor);\n\n      _this.metricStorageRegistry.register(viewStorage);\n\n      return viewStorage;\n    }); // Fallback to the per-collector aggregations if no view is configured for the instrument.\n\n    if (storages.length === 0) {\n      var perCollectorAggregations = this._meterProviderSharedState.selectAggregations(descriptor.type);\n\n      var collectorStorages = perCollectorAggregations.map(function (_a) {\n        var _b = __read(_a, 2),\n            collector = _b[0],\n            aggregation = _b[1];\n\n        var compatibleStorage = _this.metricStorageRegistry.findOrUpdateCompatibleCollectorStorage(collector, descriptor);\n\n        if (compatibleStorage != null) {\n          return compatibleStorage;\n        }\n\n        var aggregator = aggregation.createAggregator(descriptor);\n        var storage = new MetricStorageType(descriptor, aggregator, AttributesProcessor.Noop());\n\n        _this.metricStorageRegistry.registerForCollector(collector, storage);\n\n        return storage;\n      });\n      storages = storages.concat(collectorStorages);\n    }\n\n    return storages;\n  };\n\n  return MeterSharedState;\n}();\n\nexport { MeterSharedState }; //# sourceMappingURL=MeterSharedState.js.map","map":null,"metadata":{},"sourceType":"module"}