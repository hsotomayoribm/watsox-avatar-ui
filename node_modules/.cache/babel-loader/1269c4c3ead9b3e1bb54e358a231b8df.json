{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { toAttributes } from '../common/internal';\nimport { sdkSpanToOtlpSpan } from './internal';\nexport function createExportTraceServiceRequest(spans, useHex) {\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, useHex)\n  };\n}\n\nfunction createResourceMap(readableSpans) {\n  var e_1, _a;\n\n  var resourceMap = new Map();\n\n  try {\n    for (var readableSpans_1 = __values(readableSpans), readableSpans_1_1 = readableSpans_1.next(); !readableSpans_1_1.done; readableSpans_1_1 = readableSpans_1.next()) {\n      var record = readableSpans_1_1.value;\n      var ilmMap = resourceMap.get(record.resource);\n\n      if (!ilmMap) {\n        ilmMap = new Map();\n        resourceMap.set(record.resource, ilmMap);\n      } // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n\n\n      var instrumentationLibraryKey = record.instrumentationLibrary.name + \"@\" + (record.instrumentationLibrary.version || '') + \":\" + (record.instrumentationLibrary.schemaUrl || '');\n      var records = ilmMap.get(instrumentationLibraryKey);\n\n      if (!records) {\n        records = [];\n        ilmMap.set(instrumentationLibraryKey, records);\n      }\n\n      records.push(record);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (readableSpans_1_1 && !readableSpans_1_1.done && (_a = readableSpans_1.return)) _a.call(readableSpans_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(readableSpans, useHex) {\n  var resourceMap = createResourceMap(readableSpans);\n  var out = [];\n  var entryIterator = resourceMap.entries();\n  var entry = entryIterator.next();\n\n  while (!entry.done) {\n    var _a = __read(entry.value, 2),\n        resource = _a[0],\n        ilmMap = _a[1];\n\n    var scopeResourceSpans = [];\n    var ilmIterator = ilmMap.values();\n    var ilmEntry = ilmIterator.next();\n\n    while (!ilmEntry.done) {\n      var scopeSpans = ilmEntry.value;\n\n      if (scopeSpans.length > 0) {\n        var _b = scopeSpans[0].instrumentationLibrary,\n            name_1 = _b.name,\n            version = _b.version,\n            schemaUrl = _b.schemaUrl;\n        var spans = scopeSpans.map(function (readableSpan) {\n          return sdkSpanToOtlpSpan(readableSpan, useHex);\n        });\n        scopeResourceSpans.push({\n          scope: {\n            name: name_1,\n            version: version\n          },\n          spans: spans,\n          schemaUrl: schemaUrl\n        });\n      }\n\n      ilmEntry = ilmIterator.next();\n    } // TODO SDK types don't provide resource schema URL at this time\n\n\n    var transformedSpans = {\n      resource: {\n        attributes: toAttributes(resource.attributes),\n        droppedAttributesCount: 0\n      },\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined\n    };\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n} //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module"}