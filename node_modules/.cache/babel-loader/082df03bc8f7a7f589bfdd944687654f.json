{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/**\n * Formats content card data in a consistent structure\n *\n * @public\n */\n\nvar ContentCardFormatter =\n/** @class */\nfunction () {\n  function ContentCardFormatter() {}\n  /**\n   * Format different NLP content cards into a consistent structure\n   */\n\n\n  ContentCardFormatter.prototype.format = function (body) {\n    var _a;\n\n    var fullfillments = (_a = body.provider.meta.dialogflow) === null || _a === void 0 ? void 0 : _a.queryResult.fulfillmentMessages;\n    var data = fullfillments === null || fullfillments === void 0 ? void 0 : fullfillments.find(function (fullfillment) {\n      return Boolean(fullfillment === null || fullfillment === void 0 ? void 0 : fullfillment.payload);\n    });\n\n    if (data) {\n      return this.formatLegacyDialogflow(data);\n    }\n\n    return this.formatContextData(body.output.context);\n  };\n\n  ContentCardFormatter.prototype.formatLegacyDialogflow = function (data) {\n    var _this = this;\n\n    var payload = data.payload.soulmachines;\n    return Object.keys(payload).map(function (id) {\n      return {\n        id: id,\n        data: __assign({\n          id: id\n        }, _this.formatCardData(payload[id]))\n      };\n    });\n  };\n\n  ContentCardFormatter.prototype.formatContextData = function (data) {\n    var _this = this;\n\n    return this.allowedIds(data).map(function (id) {\n      var cardId = id.replace('public-', '');\n      return {\n        id: cardId,\n        data: __assign({\n          id: cardId\n        }, _this.formatCardData(data[id]))\n      };\n    });\n  };\n\n  ContentCardFormatter.prototype.allowedIds = function (values) {\n    return Object.keys(values).filter(function (k) {\n      return /public-/.test(k) === true;\n    }).filter(function (k) {\n      return /\\.original/gm.test(k) === false;\n    });\n  }; // Data should be JSON or a ContentCard, however, we can attempt to parse\n  // unknown values as JSON.\n\n\n  ContentCardFormatter.prototype.formatCardData = function (data) {\n    var parsedData = typeof data === 'string' ? JSON.parse(data) : data;\n\n    var component = parsedData.component,\n        type = parsedData.type,\n        rest = __rest(parsedData, [\"component\", \"type\"]);\n\n    return __assign({\n      type: type ? type : component\n    }, rest);\n  };\n\n  return ContentCardFormatter;\n}();\n\nexport { ContentCardFormatter }; //# sourceMappingURL=ContentCardFormatter.js.map","map":null,"metadata":{},"sourceType":"module"}