{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport * as api from '@opentelemetry/api';\nimport { callWithTimeout } from '../utils';\nimport { DEFAULT_AGGREGATION_SELECTOR, DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR } from './AggregationSelector';\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\n\nvar MetricReader =\n/** @class */\nfunction () {\n  function MetricReader(options) {\n    var _a, _b; // Tracks the shutdown state.\n    // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n\n\n    this._shutdown = false;\n    this._aggregationSelector = (_a = options === null || options === void 0 ? void 0 : options.aggregationSelector) !== null && _a !== void 0 ? _a : DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector = (_b = options === null || options === void 0 ? void 0 : options.aggregationTemporalitySelector) !== null && _b !== void 0 ? _b : DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n  /**\n   * Set the {@link MetricProducer} used by this instance.\n   *\n   * @param metricProducer\n   */\n\n\n  MetricReader.prototype.setMetricProducer = function (metricProducer) {\n    if (this._metricProducer) {\n      throw new Error('MetricReader can not be bound to a MeterProvider again.');\n    }\n\n    this._metricProducer = metricProducer;\n    this.onInitialized();\n  };\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n\n\n  MetricReader.prototype.selectAggregation = function (instrumentType) {\n    return this._aggregationSelector(instrumentType);\n  };\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n\n\n  MetricReader.prototype.selectAggregationTemporality = function (instrumentType) {\n    return this._aggregationTemporalitySelector(instrumentType);\n  };\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n\n\n  MetricReader.prototype.onInitialized = function () {// Default implementation is empty.\n  };\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n\n\n  MetricReader.prototype.collect = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this._metricProducer === undefined) {\n          throw new Error('MetricReader is not bound to a MetricProducer');\n        } // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n\n\n        if (this._shutdown) {\n          throw new Error('MetricReader is shutdown');\n        }\n\n        return [2\n        /*return*/\n        , this._metricProducer.collect({\n          timeoutMillis: options === null || options === void 0 ? void 0 : options.timeoutMillis\n        })];\n      });\n    });\n  };\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n\n\n  MetricReader.prototype.shutdown = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Do not call shutdown again if it has already been called.\n            if (this._shutdown) {\n              api.diag.error('Cannot call shutdown twice.');\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!((options === null || options === void 0 ? void 0 : options.timeoutMillis) == null)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.onShutdown()];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , callWithTimeout(this.onShutdown(), options.timeoutMillis)];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            this._shutdown = true;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n\n\n  MetricReader.prototype.forceFlush = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._shutdown) {\n              api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!((options === null || options === void 0 ? void 0 : options.timeoutMillis) == null)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.onForceFlush()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            return [4\n            /*yield*/\n            , callWithTimeout(this.onForceFlush(), options.timeoutMillis)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return MetricReader;\n}();\n\nexport { MetricReader }; //# sourceMappingURL=MetricReader.js.map","map":null,"metadata":{},"sourceType":"module"}