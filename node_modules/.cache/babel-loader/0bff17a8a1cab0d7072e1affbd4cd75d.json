{"ast":null,"code":"/**\n * @module smwebsdk\n */\n\n/*\n * Copyright 2017-2020 Soul Machines Ltd. All Rights Reserved.\n */\n\n/**\n * Deferred class\n * @preferred\n */\nvar Deferred =\n/** @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n\n    this.state = 'pending';\n    this.fate = 'unresolved';\n    this.promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n    this.promise.then(function () {\n      return _this.state = 'fulfilled';\n    }, function () {\n      return _this.state = 'rejected';\n    });\n  }\n\n  Deferred.prototype.resolve = function (value) {\n    if (this.fate === 'resolved') {\n      console.error('Deferred cannot be resolved twice');\n      return;\n    }\n\n    this.fate = 'resolved';\n\n    this._resolve(value);\n  };\n\n  Deferred.prototype.reject = function (reason) {\n    if (this.fate === 'resolved') {\n      console.error('Deferred cannot be resolved twice');\n      return;\n    }\n\n    this.fate = 'resolved';\n\n    this._reject(reason);\n  };\n\n  Deferred.prototype.isResolved = function () {\n    return this.fate === 'resolved';\n  };\n\n  Deferred.prototype.isPending = function () {\n    return this.state === 'pending';\n  };\n\n  Deferred.prototype.isFulfilled = function () {\n    return this.state === 'fulfilled';\n  };\n\n  Deferred.prototype.isRejected = function () {\n    return this.state === 'rejected';\n  };\n\n  return Deferred;\n}();\n\nexport { Deferred }; //# sourceMappingURL=Deferred.js.map","map":null,"metadata":{},"sourceType":"module"}