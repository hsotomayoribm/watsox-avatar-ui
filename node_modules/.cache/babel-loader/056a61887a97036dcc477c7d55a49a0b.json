{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { isDescriptorCompatibleWith } from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport { getConflictResolutionRecipe, getIncompatibilityDetails } from '../view/RegistrationConflicts';\n/**\n * Internal class for storing {@link MetricStorage}\n */\n\nvar MetricStorageRegistry =\n/** @class */\nfunction () {\n  function MetricStorageRegistry() {\n    this._sharedRegistry = new Map();\n    this._perCollectorRegistry = new Map();\n  }\n\n  MetricStorageRegistry.create = function () {\n    return new MetricStorageRegistry();\n  };\n\n  MetricStorageRegistry.prototype.getStorages = function (collector) {\n    var e_1, _a, e_2, _b;\n\n    var storages = [];\n\n    try {\n      for (var _c = __values(this._sharedRegistry.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var metricStorages = _d.value;\n        storages = storages.concat(metricStorages);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var perCollectorStorages = this._perCollectorRegistry.get(collector);\n\n    if (perCollectorStorages != null) {\n      try {\n        for (var _e = __values(perCollectorStorages.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var metricStorages = _f.value;\n          storages = storages.concat(metricStorages);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    return storages;\n  };\n\n  MetricStorageRegistry.prototype.register = function (storage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  };\n\n  MetricStorageRegistry.prototype.registerForCollector = function (collector, storage) {\n    var storageMap = this._perCollectorRegistry.get(collector);\n\n    if (storageMap == null) {\n      storageMap = new Map();\n\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n\n    this._registerStorage(storage, storageMap);\n  };\n\n  MetricStorageRegistry.prototype.findOrUpdateCompatibleStorage = function (expectedDescriptor) {\n    var storages = this._sharedRegistry.get(expectedDescriptor.name);\n\n    if (storages === undefined) {\n      return null;\n    } // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n\n\n    return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n  };\n\n  MetricStorageRegistry.prototype.findOrUpdateCompatibleCollectorStorage = function (collector, expectedDescriptor) {\n    var storageMap = this._perCollectorRegistry.get(collector);\n\n    if (storageMap === undefined) {\n      return null;\n    }\n\n    var storages = this._sharedRegistry.get(expectedDescriptor.name);\n\n    if (storages === undefined) {\n      return null;\n    } // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n\n\n    return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n  };\n\n  MetricStorageRegistry.prototype._registerStorage = function (storage, storageMap) {\n    var descriptor = storage.getInstrumentDescriptor();\n    var storages = storageMap.get(descriptor.name);\n\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n\n    storages.push(storage);\n  };\n\n  MetricStorageRegistry.prototype._findOrUpdateCompatibleStorage = function (expectedDescriptor, existingStorages) {\n    var e_3, _a;\n\n    var compatibleStorage = null;\n\n    try {\n      for (var existingStorages_1 = __values(existingStorages), existingStorages_1_1 = existingStorages_1.next(); !existingStorages_1_1.done; existingStorages_1_1 = existingStorages_1.next()) {\n        var existingStorage = existingStorages_1_1.value;\n        var existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n        if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n          // Use the longer description if it does not match.\n          if (existingDescriptor.description !== expectedDescriptor.description) {\n            if (expectedDescriptor.description.length > existingDescriptor.description.length) {\n              existingStorage.updateDescription(expectedDescriptor.description);\n            }\n\n            api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered, but has a different description and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'The longer description will be used.\\nTo resolve the conflict:', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n          } // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n\n\n          compatibleStorage = existingStorage;\n        } else {\n          // The implementation SHOULD warn about duplicate instrument registration\n          // conflicts after applying View configuration.\n          api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'To resolve the conflict:\\n', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (existingStorages_1_1 && !existingStorages_1_1.done && (_a = existingStorages_1.return)) _a.call(existingStorages_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return compatibleStorage;\n  };\n\n  return MetricStorageRegistry;\n}();\n\nexport { MetricStorageRegistry }; //# sourceMappingURL=MetricStorageRegistry.js.map","map":null,"metadata":{},"sourceType":"module"}