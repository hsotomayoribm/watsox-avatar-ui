{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nvar styles = {\n  \"alertDangerContainer\": \"_1alIC\",\n  \"alertDangerHeading\": \"_nqCmj\",\n  \"alertDangerInfo\": \"_2Qem8\"\n};\n\nvar Alert = function Alert(_ref) {\n  var txtMainHeading = _ref.txtMainHeading,\n      customClassName = _ref.customClassName,\n      txtSubHeading = _ref.txtSubHeading,\n      alertStyles = _ref.alertStyles;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: alertStyles.alertDangerContainer + \" \" + customClassName\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: alertStyles.alertDangerHeading\n  }, txtMainHeading), /*#__PURE__*/React.createElement(\"span\", {\n    className: alertStyles.alertDangerInfo\n  }, txtSubHeading));\n};\n\nvar ReactInternetSpeedMeter = function ReactInternetSpeedMeter(_ref) {\n  var _ref$txtMainHeading = _ref.txtMainHeading,\n      txtMainHeading = _ref$txtMainHeading === void 0 ? 'Opps...' : _ref$txtMainHeading,\n      _ref$outputType = _ref.outputType,\n      outputType = _ref$outputType === void 0 ? 'alert' : _ref$outputType,\n      customClassName = _ref.customClassName,\n      _ref$pingInterval = _ref.pingInterval,\n      pingInterval = _ref$pingInterval === void 0 ? 30000 : _ref$pingInterval,\n      _ref$thresholdUnit = _ref.thresholdUnit,\n      thresholdUnit = _ref$thresholdUnit === void 0 ? 'megabyte' : _ref$thresholdUnit,\n      _ref$threshold = _ref.threshold,\n      threshold = _ref$threshold === void 0 ? 7 : _ref$threshold,\n      _ref$txtSubHeading = _ref.txtSubHeading,\n      txtSubHeading = _ref$txtSubHeading === void 0 ? 'Diconnected from internet' : _ref$txtSubHeading,\n      imageUrl = _ref.imageUrl,\n      downloadSize = _ref.downloadSize,\n      _ref$callbackFunction = _ref.callbackFunctionOnNetworkDown,\n      callbackFunctionOnNetworkDown = _ref$callbackFunction === void 0 ? function () {\n    return console.log('No callback on Network Down');\n  } : _ref$callbackFunction,\n      _ref$callbackFunction2 = _ref.callbackFunctionOnNetworkTest,\n      callbackFunctionOnNetworkTest = _ref$callbackFunction2 === void 0 ? function () {\n    return console.log('No callback On Network test');\n  } : _ref$callbackFunction2,\n      _ref$callbackFunction3 = _ref.callbackFunctionOnError,\n      callbackFunctionOnError = _ref$callbackFunction3 === void 0 ? function () {\n    return console.log('error in downloading image');\n  } : _ref$callbackFunction3;\n\n  var _useState = useState(false),\n      isNetworkDown = _useState[0],\n      setisNetworkDown = _useState[1];\n\n  var intervalFun;\n  window.addEventListener('offline', function () {\n    return setisNetworkDown(true);\n  });\n  window.addEventListener('online', function () {\n    return setisNetworkDown(false);\n  });\n\n  var startCalculating = function startCalculating() {\n    return window.setTimeout(MeasureConnectionSpeed, pingInterval);\n  };\n\n  useEffect(function () {\n    intervalFun = startCalculating();\n    return function () {\n      return window.clearInterval(intervalFun);\n    };\n  }, []);\n\n  var MeasureConnectionSpeed = function MeasureConnectionSpeed() {\n    var startTime, endTime;\n    var download = new Image();\n    startTime = new Date().getTime();\n    var cacheBuster = '?nnn=' + startTime;\n    download.src = imageUrl + cacheBuster;\n\n    download.onload = function (d) {\n      endTime = new Date().getTime();\n      showResults(startTime, endTime);\n    };\n\n    download.onerror = function (err, msg) {\n      console.log('err', err);\n      callbackFunctionOnError(err);\n      window.clearInterval(intervalFun);\n    };\n\n    startCalculating();\n  };\n\n  var showResults = function showResults(startTime, endTime) {\n    var duration = (endTime - startTime) / 1000;\n    var bitsLoaded = downloadSize * 8;\n    var speedBps = (bitsLoaded / duration).toFixed(2);\n    var speedKbps = (speedBps / 1024).toFixed(2);\n    var speedMbps = (speedKbps / 1024).toFixed(2);\n    setNetworStatus(speedBps, speedKbps, speedMbps);\n  };\n\n  var setNetworStatus = function setNetworStatus(speedBps, speedKbps, speedMbps) {\n    if (thresholdUnit === 'byte') {\n      if (speedBps < threshold) {\n        setisNetworkDown(true);\n        callbackFunctionOnNetworkDown(speedBps);\n      } else {\n        setisNetworkDown(false);\n      }\n\n      callbackFunctionOnNetworkTest(speedBps);\n    } else if (thresholdUnit === 'kilobyte') {\n      if (speedKbps < threshold) {\n        setisNetworkDown(true);\n        callbackFunctionOnNetworkDown(speedKbps);\n      } else {\n        setisNetworkDown(false);\n      }\n\n      callbackFunctionOnNetworkTest(speedKbps);\n    } else if (thresholdUnit === 'megabyte') {\n      if (speedMbps < threshold) {\n        setisNetworkDown(true);\n        callbackFunctionOnNetworkDown(speedMbps);\n      } else {\n        setisNetworkDown(false);\n      }\n\n      callbackFunctionOnNetworkTest(speedMbps);\n    } else {\n      console.log('Invalid thresholdUnit');\n    }\n  };\n\n  if (isNetworkDown) {\n    if (outputType === 'alert') {\n      return /*#__PURE__*/React.createElement(Alert, {\n        alertStyles: styles,\n        customClassName: customClassName,\n        txtMainHeading: txtMainHeading,\n        txtSubHeading: txtSubHeading\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", null);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", null);\n};\n\nexport { ReactInternetSpeedMeter }; //# sourceMappingURL=index.modern.js.map","map":null,"metadata":{},"sourceType":"module"}