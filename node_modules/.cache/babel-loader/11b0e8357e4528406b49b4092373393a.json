{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nvar DEFAULT_TRACE_TIMEOUT = 10000;\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\n\nexport function parseHeaders(partialHeaders) {\n  if (partialHeaders === void 0) {\n    partialHeaders = {};\n  }\n\n  var headers = {};\n  Object.entries(partialHeaders).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        value = _b[1];\n\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n    }\n  });\n  return headers;\n}\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\n\nexport function appendResourcePathToUrl(url, path) {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n\n  return url + path;\n}\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @param path\n * @returns url\n */\n\nexport function appendRootPathToUrlIfNeeded(url, path) {\n  if (!url.includes(path) && !url.endsWith('/')) {\n    url = url + '/';\n  }\n\n  return url;\n}\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\n\nexport function configureExporterTimeout(timeoutMillis) {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv() {\n  var _a;\n\n  var definedTimeout = Number((_a = getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) !== null && _a !== void 0 ? _a : getEnv().OTEL_EXPORTER_OTLP_TIMEOUT);\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n} // OTLP exporter configured timeout - using default value of 10000ms\n\n\nexport function invalidTimeout(timeout, defaultTimeout) {\n  diag.warn('Timeout must be greater than 0', timeout);\n  return defaultTimeout;\n} //# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"module"}