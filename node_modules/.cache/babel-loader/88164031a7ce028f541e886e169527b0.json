{"ast":null,"code":"/**\n * @module smwebsdk\n */\n\n/*\n * Copyright 2017-2020 Soul Machines Ltd. All Rights Reserved.\n */\n\n/**\n * Features class\n *\n * An instance of this class can also be created by the convenience API function DetectCapabilities()\n *\n * ```ts\n * var features  = window.smwebsdk.DetectCapabilities();\n * ```\n *\n * which also calls the detectWebRTCFeatures() method.\n */\nvar Features =\n/** @class */\nfunction () {\n  function Features() {\n    this._hasMicrophone = false;\n    this._hasCamera = false;\n    this._isAndroid = false;\n    this._isBrowserSupported = false;\n    this._isEdge = false;\n    this._isIos = false;\n    this._isAndroid = this.detectAndroid();\n    this._isEdge = this.detectEdge();\n    this._isIos = this.detectIos();\n  }\n\n  Features.prototype.detectEdge = function () {\n    return this.userAgentMatches('Edge');\n  };\n\n  Features.prototype.detectAndroid = function () {\n    return this.userAgentMatches('Android');\n  };\n\n  Features.prototype.detectIos = function () {\n    var isIOS = (/iPad|iPhone|iPod/i.test(navigator.platform) || navigator && navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1) && !window.MSStream;\n    return isIOS;\n  };\n\n  Features.prototype.userAgentMatches = function (text) {\n    var userAgent = window.navigator.userAgent;\n    var matches = userAgent.match(text);\n\n    if (matches) {\n      return matches.length > 0 ? true : false;\n    }\n\n    return false;\n  };\n\n  Features.prototype.detectWebRTCFeatures = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      // Check for runtime host\n      if (window.SmIsUnderRuntimeHost) {\n        // TODO - detect whether camera/microphone is available in runtime host\n        _this._isBrowserSupported = true;\n        _this._hasMicrophone = true;\n        _this._hasCamera = true;\n        resolve(_this);\n      } // This approach heavily influenced by the helpful and MIT licensed:\n      //    https://github.com/muaz-khan/DetectRTC/blob/master/DetectRTC.js\n      // Detect webrtc support\n\n\n      var isWebRTCSupported = false;\n      ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function (item) {\n        if (isWebRTCSupported) {\n          return;\n        }\n\n        if (item in window) {\n          isWebRTCSupported = true;\n        }\n      }); // Apparently IE11 injected iPhone into user agent string, hence check for not MSStream\n\n      var iOS = navigator.userAgent.match(/iPhone|iPad|iPod/i) && !window.MSStream;\n      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n      if (isWebRTCSupported && iOS && !isSafari) {\n        // Webrtc is not supported on an iOS device using webview instead of full Safari\n        isWebRTCSupported = false;\n      }\n\n      _this._isBrowserSupported = isWebRTCSupported;\n\n      if (!_this._isBrowserSupported) {\n        resolve(_this);\n      } // Find the enumerate devices function if available\n\n\n      var navEnumerateDevices = null;\n\n      if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        // Firefox 38+ seems having support of enumerateDevices\n        // Thanks @xdumaine/enumerateDevices\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        navEnumerateDevices = function (callback) {\n          Promise.resolve(navigator.mediaDevices.enumerateDevices()).then(function (value) {\n            if (value === void 0) {\n              value = [];\n            }\n\n            callback(value);\n          }).catch(function () {\n            callback([]);\n          });\n        };\n      }\n\n      var MediaStreamTrack = window.MediaStreamTrack;\n\n      if (!navEnumerateDevices && MediaStreamTrack && MediaStreamTrack.getSources) {\n        navEnumerateDevices = MediaStreamTrack.getSources.bind(MediaStreamTrack);\n      }\n\n      if (!navEnumerateDevices && navigator.enumerateDevices) {\n        // ! block was originally unreachable until bug is fixed in trunk\n        navEnumerateDevices = navigator.enumerateDevices.bind(navigator);\n      } // Enumerate the media devices\n\n\n      if (navEnumerateDevices) {\n        navEnumerateDevices(function (devices) {\n          devices.forEach(function (device) {\n            if (device.kind === 'audioinput') {\n              _this._hasMicrophone = true;\n            }\n\n            if (device.kind === 'videoinput') {\n              _this._hasCamera = true;\n            }\n          });\n          resolve(_this);\n        });\n      } else {\n        resolve(_this);\n      }\n    });\n  };\n\n  Object.defineProperty(Features.prototype, \"hasMicrophone\", {\n    get: function () {\n      return this._hasMicrophone;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Features.prototype, \"hasCamera\", {\n    get: function () {\n      return this._hasCamera;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Features.prototype, \"isAndroid\", {\n    get: function () {\n      return this._isAndroid;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Features.prototype, \"isBrowserSupported\", {\n    get: function () {\n      return this._isBrowserSupported;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Features.prototype, \"isEdge\", {\n    get: function () {\n      return this._isEdge;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Features.prototype, \"isIos\", {\n    get: function () {\n      return this._isIos;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Features;\n}();\n\nexport { Features }; //# sourceMappingURL=Features.js.map","map":null,"metadata":{},"sourceType":"module"}