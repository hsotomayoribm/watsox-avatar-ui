{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\n\nvar ProxyTracer =\n/** @class */\nfunction () {\n  function ProxyTracer(_provider, name, version, options) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n    this.options = options;\n  }\n\n  ProxyTracer.prototype.startSpan = function (name, options, context) {\n    return this._getTracer().startSpan(name, options, context);\n  };\n\n  ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n    var tracer = this._getTracer();\n\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  };\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n\n\n  ProxyTracer.prototype._getTracer = function () {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  };\n\n  return ProxyTracer;\n}();\n\nexport { ProxyTracer }; //# sourceMappingURL=ProxyTracer.js.map","map":null,"metadata":{},"sourceType":"module"}