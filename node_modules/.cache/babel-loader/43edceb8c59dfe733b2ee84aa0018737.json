{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nvar BaseContext =\n/** @class */\nfunction () {\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  function BaseContext(parentContext) {\n    // for minification\n    var self = this;\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = function (key) {\n      return self._currentContext.get(key);\n    };\n\n    self.setValue = function (key, value) {\n      var context = new BaseContext(self._currentContext);\n\n      context._currentContext.set(key, value);\n\n      return context;\n    };\n\n    self.deleteValue = function (key) {\n      var context = new BaseContext(self._currentContext);\n\n      context._currentContext.delete(key);\n\n      return context;\n    };\n  }\n\n  return BaseContext;\n}();\n/** The root context is used as the default parent context when there is no active context */\n\n\nexport var ROOT_CONTEXT = new BaseContext(); //# sourceMappingURL=context.js.map","map":null,"metadata":{},"sourceType":"module"}