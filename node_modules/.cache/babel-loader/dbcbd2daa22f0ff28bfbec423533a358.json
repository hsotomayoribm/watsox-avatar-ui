{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaweinzierl/Desktop/sm-neuralseek-ibm/react-ui/src/components/PersonaVideo.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable jsx-a11y/media-has-caption */\nimport React, { createRef, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport * as actions from '../store/sm';\nimport proxyVideo from '../proxyVideo';\nimport { headerHeight, transparentHeader } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PersonaVideo = _ref => {\n  _s();\n\n  let {\n    loading,\n    connected,\n    setVideoDimensions,\n    className\n  } = _ref;\n  // video elem ref used to link proxy video element to displayed video\n  const videoRef = /*#__PURE__*/createRef(); // we need the container dimensions to render the right size video in the persona server\n\n  const containerRef = /*#__PURE__*/createRef(); // only set the video ref once, otherwise we get a flickering whenever the window is resized\n\n  const [videoDisplayed, setVideoDisplayed] = useState(false); // we need to keep track of the inner window height so the video displays correctly\n\n  const [height, setHeight] = useState('100vh');\n\n  const handleResize = () => {\n    if (containerRef.current) {\n      // the video should resize with the element size.\n      // this needs to be done through the redux store because the Persona server\n      // needs to be aware of the video target dimensions to render a propperly sized video\n      const videoWidth = containerRef.current.clientWidth;\n      const videoHeight = containerRef.current.clientHeight;\n      setVideoDimensions(videoWidth, videoHeight); // constrain to inner window height so it fits on mobile\n\n      setHeight(`${videoHeight}`);\n    }\n  }; // persona video feed is routed through a proxy <video> tag,\n  // we need to get the src data from that element to use here\n\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n\n    if (connected) {\n      if (!videoDisplayed) {\n        videoRef.current.srcObject = proxyVideo.srcObject;\n        setVideoDisplayed(true);\n      }\n    } // when component dismounts, remove resize listener\n\n\n    return () => window.removeEventListener('resize', handleResize);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: className,\n    style: {\n      height\n    },\n    children: [connected ? /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      className: \"persona-video\",\n      id: \"personavideo\",\n      \"data-sm-video\": true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this) : null, loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this) : null, connected === false && loading === false ? 'disconnected' : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PersonaVideo, \"Ufzpjuojm14C0v9hkOR6aV7PMoY=\");\n\n_c = PersonaVideo;\nPersonaVideo.propTypes = {\n  setVideoDimensions: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  connected: PropTypes.bool.isRequired,\n  className: PropTypes.string.isRequired\n};\nconst StyledPersonaVideo = styled(PersonaVideo)`\n  /* if you need the persona video to be different than the window dimensions, change these values */\n  width: 100vw;\n\n  position: relative;\n  z-index: 0;\n  overflow: hidden;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: ${transparentHeader ? '' : headerHeight};\n  .persona-video {\n    /* the video element will conform to the container dimensions, so keep this as it is */\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst mapStateToProps = state => ({\n  loading: state.sm.loading,\n  connected: state.sm.connected,\n  width: state.sm.videoWidth,\n  height: state.sm.videoHeight\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setVideoDimensions: (videoWidth, videoHeight) => dispatch(actions.setVideoDimensions({\n    videoWidth,\n    videoHeight\n  }))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StyledPersonaVideo);\n\nvar _c;\n\n$RefreshReg$(_c, \"PersonaVideo\");","map":{"version":3,"names":["React","createRef","useEffect","useState","connect","PropTypes","styled","actions","proxyVideo","headerHeight","transparentHeader","PersonaVideo","loading","connected","setVideoDimensions","className","videoRef","containerRef","videoDisplayed","setVideoDisplayed","height","setHeight","handleResize","current","videoWidth","clientWidth","videoHeight","clientHeight","window","addEventListener","srcObject","removeEventListener","propTypes","func","isRequired","bool","string","StyledPersonaVideo","mapStateToProps","state","sm","width","mapDispatchToProps","dispatch"],"sources":["/Users/sofiaweinzierl/Desktop/sm-neuralseek-ibm/react-ui/src/components/PersonaVideo.js"],"sourcesContent":["/* eslint-disable jsx-a11y/media-has-caption */\nimport React, { createRef, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport * as actions from '../store/sm';\nimport proxyVideo from '../proxyVideo';\nimport { headerHeight, transparentHeader } from '../config';\n\nconst PersonaVideo = ({\n  loading, connected, setVideoDimensions, className,\n}) => {\n  // video elem ref used to link proxy video element to displayed video\n  const videoRef = createRef();\n  // we need the container dimensions to render the right size video in the persona server\n  const containerRef = createRef();\n  // only set the video ref once, otherwise we get a flickering whenever the window is resized\n  const [videoDisplayed, setVideoDisplayed] = useState(false);\n  // we need to keep track of the inner window height so the video displays correctly\n  const [height, setHeight] = useState('100vh');\n\n  const handleResize = () => {\n    if (containerRef.current) {\n      // the video should resize with the element size.\n      // this needs to be done through the redux store because the Persona server\n      // needs to be aware of the video target dimensions to render a propperly sized video\n      const videoWidth = containerRef.current.clientWidth;\n      const videoHeight = containerRef.current.clientHeight;\n      setVideoDimensions(videoWidth, videoHeight);\n      // constrain to inner window height so it fits on mobile\n      setHeight(`${videoHeight}`);\n    }\n  };\n\n  // persona video feed is routed through a proxy <video> tag,\n  // we need to get the src data from that element to use here\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    if (connected) {\n      if (!videoDisplayed) {\n        videoRef.current.srcObject = proxyVideo.srcObject;\n        setVideoDisplayed(true);\n      }\n    }\n    // when component dismounts, remove resize listener\n    return () => window.removeEventListener('resize', handleResize);\n  });\n\n  return (\n    <div ref={containerRef} className={className} style={{ height }}>\n      {\n        connected\n          ? (\n            <video ref={videoRef} autoPlay playsInline className=\"persona-video\" id=\"personavideo\" data-sm-video />\n          )\n          : null\n      }\n      {\n        loading\n          ? (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n          )\n          : null\n      }\n      {\n        connected === false && loading === false ? 'disconnected' : ''\n      }\n    </div>\n  );\n};\n\nPersonaVideo.propTypes = {\n  setVideoDimensions: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  connected: PropTypes.bool.isRequired,\n  className: PropTypes.string.isRequired,\n};\n\nconst StyledPersonaVideo = styled(PersonaVideo)`\n  /* if you need the persona video to be different than the window dimensions, change these values */\n  width: 100vw;\n\n  position: relative;\n  z-index: 0;\n  overflow: hidden;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: ${transparentHeader ? '' : headerHeight};\n  .persona-video {\n    /* the video element will conform to the container dimensions, so keep this as it is */\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst mapStateToProps = (state) => ({\n  loading: state.sm.loading,\n  connected: state.sm.connected,\n  width: state.sm.videoWidth,\n  height: state.sm.videoHeight,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setVideoDimensions: (videoWidth, videoHeight) => dispatch(\n    actions.setVideoDimensions({ videoWidth, videoHeight }),\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StyledPersonaVideo);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}