{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\n\nvar InMemorySpanExporter =\n/** @class */\nfunction () {\n  function InMemorySpanExporter() {\n    this._finishedSpans = [];\n    /**\n     * Indicates if the exporter has been \"shutdown.\"\n     * When false, exported spans will not be stored in-memory.\n     */\n\n    this._stopped = false;\n  }\n\n  InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n    var _a;\n\n    if (this._stopped) return resultCallback({\n      code: ExportResultCode.FAILED,\n      error: new Error('Exporter has been stopped')\n    });\n\n    (_a = this._finishedSpans).push.apply(_a, __spreadArray([], __read(spans), false));\n\n    setTimeout(function () {\n      return resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }, 0);\n  };\n\n  InMemorySpanExporter.prototype.shutdown = function () {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return Promise.resolve();\n  };\n\n  InMemorySpanExporter.prototype.reset = function () {\n    this._finishedSpans = [];\n  };\n\n  InMemorySpanExporter.prototype.getFinishedSpans = function () {\n    return this._finishedSpans;\n  };\n\n  return InMemorySpanExporter;\n}();\n\nexport { InMemorySpanExporter }; //# sourceMappingURL=InMemorySpanExporter.js.map","map":null,"metadata":{},"sourceType":"module"}