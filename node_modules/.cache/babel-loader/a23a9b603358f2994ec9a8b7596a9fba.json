{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaweinzierl/Desktop/sm-neuralseek-ibm/react-ui/src/components/Captions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { syllable } from 'syllable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Captions = _ref => {\n  _s();\n\n  let {\n    speechState,\n    lastPersonaUtterance,\n    className,\n    connected\n  } = _ref;\n  const [showCaptions, setShowCaptions] = useState(false); // if we have a very long response, we need to cycle the displayed content\n\n  const [captionText, setCaptionText] = useState(''); // keep track of when we first showed this caption. captions should be on screen min 1.5s\n\n  const [captionStartTimestamp, setCaptionStartTimestamp] = useState();\n  const [captionTimeout, setCaptionsTimeout] = useState();\n  const minCaptionDuration = 1500;\n  useEffect(() => {\n    if (connected === false) setShowCaptions(false);else if (speechState === 'speaking') {\n      // when a new utterance starts, show captions\n      setShowCaptions(false);\n      const sentences = lastPersonaUtterance.split('. '); // estimate how long each caption should be displayed based on # of syllables and punctuation\n\n      const sentencesWithDurationEstimate = sentences.map(s => {\n        const millisPerSyllable = 210;\n        const millisPerPunct = 330;\n        const syllableCount = syllable(s);\n        const regex = /[^\\w ]/gm;\n        const punctCount = [...s.matchAll(regex)].length;\n        const durationEstimate = syllableCount * millisPerSyllable + punctCount * millisPerPunct // add one punct delay for the period that gets stripped when splitting the sentences\n        + millisPerPunct;\n        return {\n          text: s,\n          durationEstimate\n        };\n      }); // recursively cycle through sentences on very long captions\n\n      const displayCaption = i => {\n        const {\n          text,\n          durationEstimate\n        } = sentencesWithDurationEstimate[i];\n        setCaptionText(text);\n\n        if (sentencesWithDurationEstimate[i + 1]) {\n          setTimeout(() => displayCaption(i + 1), durationEstimate);\n        }\n      };\n\n      displayCaption(0); // record when we put captions on the screen\n\n      setCaptionStartTimestamp(Date.now()); // clear any previous timeout from previous captions.\n      // this won't make the captions disappear, since we're overwriting the content\n\n      clearTimeout(captionTimeout);\n    } else {\n      // when the utterance ends:\n      const captionsDisplayedFor = Date.now() - captionStartTimestamp; // check to see if the captions have been displayed for the min. amount of time\n\n      if (captionsDisplayedFor > minCaptionDuration) setShowCaptions(false); // if not, set a timeout to hide them when it has elapsed\n      else {\n        const newCaptionTimeout = setTimeout(() => {\n          setShowCaptions(false);\n        }, minCaptionDuration - captionsDisplayedFor);\n        setCaptionsTimeout(newCaptionTimeout);\n      } // sometimes we get blank input, hide that when it happens\n\n      if (captionText === '') setShowCaptions(false);\n    }\n  }, [speechState, connected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `captions ${showCaptions ? '' : 'hide-captions'} text-center`,\n      children: showCaptions ? captionText : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Captions, \"USrvtZ5pn21KKftACumyASUMwas=\");\n\n_c = Captions;\nCaptions.propTypes = {\n  speechState: PropTypes.string.isRequired,\n  lastPersonaUtterance: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  connected: PropTypes.bool.isRequired\n};\nconst StyledCaptions = styled(Captions)`\n  display: inline-block;\n  .captions {\n    margin-bottom: .3rem;\n\n    padding-top: 0.2rem;\n    padding-bottom: 0.2rem;\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #FFF;\n\n    border-radius: 2px;\n\n    display: flex;\n    align-items: center;\n\n    min-height: 35px;\n    transition: height 0.3s;\n  }\n  .hide-captions {\n    min-height: 0 !important;\n    background-color: rgba(0,0,0,0);\n  }\n\n`;\n\nconst mapStateToProps = state => ({\n  speechState: state.sm.speechState,\n  lastPersonaUtterance: state.sm.lastPersonaUtterance,\n  connected: state.sm.connected\n});\n\nexport default connect(mapStateToProps)(StyledCaptions);\n\nvar _c;\n\n$RefreshReg$(_c, \"Captions\");","map":{"version":3,"names":["React","useState","useEffect","connect","styled","PropTypes","syllable","Captions","speechState","lastPersonaUtterance","className","connected","showCaptions","setShowCaptions","captionText","setCaptionText","captionStartTimestamp","setCaptionStartTimestamp","captionTimeout","setCaptionsTimeout","minCaptionDuration","sentences","split","sentencesWithDurationEstimate","map","s","millisPerSyllable","millisPerPunct","syllableCount","regex","punctCount","matchAll","length","durationEstimate","text","displayCaption","i","setTimeout","Date","now","clearTimeout","captionsDisplayedFor","newCaptionTimeout","propTypes","string","isRequired","bool","StyledCaptions","mapStateToProps","state","sm"],"sources":["/Users/sofiaweinzierl/Desktop/sm-neuralseek-ibm/react-ui/src/components/Captions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { syllable } from 'syllable';\n\nconst Captions = ({\n  speechState, lastPersonaUtterance, className, connected,\n}) => {\n  const [showCaptions, setShowCaptions] = useState(false);\n  // if we have a very long response, we need to cycle the displayed content\n  const [captionText, setCaptionText] = useState('');\n  // keep track of when we first showed this caption. captions should be on screen min 1.5s\n  const [captionStartTimestamp, setCaptionStartTimestamp] = useState();\n  const [captionTimeout, setCaptionsTimeout] = useState();\n  const minCaptionDuration = 1500;\n\n  useEffect(() => {\n    if (connected === false) setShowCaptions(false);\n    else if (speechState === 'speaking') {\n      // when a new utterance starts, show captions\n      setShowCaptions(false);\n      const sentences = lastPersonaUtterance.split('. ');\n      // estimate how long each caption should be displayed based on # of syllables and punctuation\n      const sentencesWithDurationEstimate = sentences.map((s) => {\n        const millisPerSyllable = 210;\n        const millisPerPunct = 330;\n\n        const syllableCount = syllable(s);\n\n        const regex = /[^\\w ]/gm;\n        const punctCount = [...s.matchAll(regex)].length;\n\n        const durationEstimate = (syllableCount * millisPerSyllable)\n          + (punctCount * millisPerPunct)\n          // add one punct delay for the period that gets stripped when splitting the sentences\n          + millisPerPunct;\n        return { text: s, durationEstimate };\n      });\n\n      // recursively cycle through sentences on very long captions\n      const displayCaption = (i) => {\n        const { text, durationEstimate } = sentencesWithDurationEstimate[i];\n        setCaptionText(text);\n        if (sentencesWithDurationEstimate[i + 1]) {\n          setTimeout(() => displayCaption(i + 1), durationEstimate);\n        }\n      };\n      displayCaption(0);\n\n      // record when we put captions on the screen\n      setCaptionStartTimestamp(Date.now());\n      // clear any previous timeout from previous captions.\n      // this won't make the captions disappear, since we're overwriting the content\n      clearTimeout(captionTimeout);\n    } else {\n      // when the utterance ends:\n      const captionsDisplayedFor = Date.now() - captionStartTimestamp;\n      // check to see if the captions have been displayed for the min. amount of time\n      if (captionsDisplayedFor > minCaptionDuration) setShowCaptions(false);\n      // if not, set a timeout to hide them when it has elapsed\n      else {\n        const newCaptionTimeout = setTimeout(() => {\n          setShowCaptions(false);\n        }, minCaptionDuration - captionsDisplayedFor);\n        setCaptionsTimeout(newCaptionTimeout);\n      }\n      // sometimes we get blank input, hide that when it happens\n      if (captionText === '') setShowCaptions(false);\n    }\n  }, [speechState, connected]);\n\n  return (\n    <div className={className}>\n      <div className={`captions ${showCaptions ? '' : 'hide-captions'} text-center`}>\n        { showCaptions ? captionText : null }\n      </div>\n    </div>\n  );\n};\n\nCaptions.propTypes = {\n  speechState: PropTypes.string.isRequired,\n  lastPersonaUtterance: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  connected: PropTypes.bool.isRequired,\n};\n\nconst StyledCaptions = styled(Captions)`\n  display: inline-block;\n  .captions {\n    margin-bottom: .3rem;\n\n    padding-top: 0.2rem;\n    padding-bottom: 0.2rem;\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #FFF;\n\n    border-radius: 2px;\n\n    display: flex;\n    align-items: center;\n\n    min-height: 35px;\n    transition: height 0.3s;\n  }\n  .hide-captions {\n    min-height: 0 !important;\n    background-color: rgba(0,0,0,0);\n  }\n\n`;\n\nconst mapStateToProps = (state) => ({\n  speechState: state.sm.speechState,\n  lastPersonaUtterance: state.sm.lastPersonaUtterance,\n  connected: state.sm.connected,\n});\n\nexport default connect(mapStateToProps)(StyledCaptions);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}