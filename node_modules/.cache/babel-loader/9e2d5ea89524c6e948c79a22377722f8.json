{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { AttributeHashMap } from './HashMap';\n/**\n * Internal interface.\n *\n * Allows synchronous collection of metrics. This processor should allow\n * allocation of new aggregation cells for metrics and convert cumulative\n * recording to delta data points.\n */\n\nvar DeltaMetricProcessor =\n/** @class */\nfunction () {\n  function DeltaMetricProcessor(_aggregator) {\n    this._aggregator = _aggregator;\n    this._activeCollectionStorage = new AttributeHashMap(); // TODO: find a reasonable mean to clean the memo;\n    // https://github.com/open-telemetry/opentelemetry-specification/pull/2208\n\n    this._cumulativeMemoStorage = new AttributeHashMap();\n  }\n\n  DeltaMetricProcessor.prototype.record = function (value, attributes, _context, collectionTime) {\n    var _this = this;\n\n    var accumulation = this._activeCollectionStorage.getOrDefault(attributes, function () {\n      return _this._aggregator.createAccumulation(collectionTime);\n    });\n\n    accumulation === null || accumulation === void 0 ? void 0 : accumulation.record(value);\n  };\n\n  DeltaMetricProcessor.prototype.batchCumulate = function (measurements, collectionTime) {\n    var _this = this;\n\n    Array.from(measurements.entries()).forEach(function (_a) {\n      var _b = __read(_a, 3),\n          attributes = _b[0],\n          value = _b[1],\n          hashCode = _b[2];\n\n      var accumulation = _this._aggregator.createAccumulation(collectionTime);\n\n      accumulation === null || accumulation === void 0 ? void 0 : accumulation.record(value);\n      var delta = accumulation;\n\n      if (_this._cumulativeMemoStorage.has(attributes, hashCode)) {\n        // has() returned true, previous is present.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        var previous = _this._cumulativeMemoStorage.get(attributes, hashCode);\n\n        delta = _this._aggregator.diff(previous, accumulation);\n      } // Save the current record and the delta record.\n\n\n      _this._cumulativeMemoStorage.set(attributes, accumulation, hashCode);\n\n      _this._activeCollectionStorage.set(attributes, delta, hashCode);\n    });\n  };\n  /**\n   * Returns a collection of delta metrics. Start time is the when first\n   * time event collected.\n   */\n\n\n  DeltaMetricProcessor.prototype.collect = function () {\n    var unreportedDelta = this._activeCollectionStorage;\n    this._activeCollectionStorage = new AttributeHashMap();\n    return unreportedDelta;\n  };\n\n  return DeltaMetricProcessor;\n}();\n\nexport { DeltaMetricProcessor }; //# sourceMappingURL=DeltaMetricProcessor.js.map","map":null,"metadata":{},"sourceType":"module"}