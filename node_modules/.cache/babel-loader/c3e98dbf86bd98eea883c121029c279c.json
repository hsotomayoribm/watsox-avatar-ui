{"ast":null,"code":"import { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nvar DEFAULT_URL = 'http://localhost:4318/v1/traces';\nexport var SmTracerProvider = function () {\n  var _tracerProvider;\n\n  var _instance;\n\n  return {\n    init: function (opts) {\n      var _a;\n\n      if (_instance) {\n        return;\n      }\n\n      opts.url = opts.url || DEFAULT_URL;\n      opts.webSDKVersion = opts.webSDKVersion || 'unknown';\n      _tracerProvider = new WebTracerProvider({\n        resource: new Resource((_a = {}, _a[SemanticResourceAttributes.SERVICE_NAME] = 'smwebsdk', _a[SemanticResourceAttributes.SERVICE_VERSION] = opts.webSDKVersion, _a))\n      });\n\n      _tracerProvider.addSpanProcessor(new BatchSpanProcessor(new OTLPTraceExporter({\n        url: opts.url,\n        headers: {\n          Authorization: 'Bearer ' + opts.jwt\n        }\n      })));\n\n      _tracerProvider.register();\n\n      _instance = _tracerProvider.getTracer('smwebsdk');\n    },\n    isInitialized: function () {\n      return !!_instance;\n    },\n    getTracer: function () {\n      return _instance;\n    },\n    defaultUrl: DEFAULT_URL\n  };\n}();\nObject.freeze(SmTracerProvider); //# sourceMappingURL=SmTelemetry.js.map","map":null,"metadata":{},"sourceType":"module"}