{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../NoopMeterProvider';\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_METRICS_API_KEY, makeGetter, _global } from './global-utils';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\n\nvar MetricsAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n\n\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current global meter. Returns the initialized global meter provider.\n   */\n\n\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    if (_global[GLOBAL_METRICS_API_KEY]) {\n      // global meter provider has already been set\n      return this.getMeterProvider();\n    }\n\n    _global[GLOBAL_METRICS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_METER_PROVIDER);\n    return provider;\n  };\n  /**\n   * Returns the global meter provider.\n   */\n\n\n  MetricsAPI.prototype.getMeterProvider = function () {\n    var _a, _b;\n\n    return (_b = (_a = _global[GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n\n\n  MetricsAPI.prototype.getMeter = function (name, version, options) {\n    return this.getMeterProvider().getMeter(name, version, options);\n  };\n  /** Remove the global meter provider */\n\n\n  MetricsAPI.prototype.disable = function () {\n    delete _global[GLOBAL_METRICS_API_KEY];\n  };\n\n  return MetricsAPI;\n}();\n\nexport { MetricsAPI }; //# sourceMappingURL=metrics.js.map","map":null,"metadata":{},"sourceType":"module"}