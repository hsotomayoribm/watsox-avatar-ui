{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PerformanceTimingNames as PTN } from './enums/PerformanceTimingNames';\nimport { hrTimeToNanoseconds, timeInputToHrTime, urlMatches } from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions'; // Used to normalize relative URLs\n\nvar urlNormalizingAnchor;\n\nfunction getUrlNormalizingAnchor() {\n  if (!urlNormalizingAnchor) {\n    urlNormalizingAnchor = document.createElement('a');\n  }\n\n  return urlNormalizingAnchor;\n}\n/**\n * Helper function to be able to use enum as typed key in type and in interface when using forEach\n * @param obj\n * @param key\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport function hasKey(obj, key) {\n  return key in obj;\n}\n/**\n * Helper function for starting an event on span based on {@link PerformanceEntries}\n * @param span\n * @param performanceName name of performance entry for time start\n * @param entries\n */\n\nexport function addSpanNetworkEvent(span, performanceName, entries) {\n  if (hasKey(entries, performanceName) && typeof entries[performanceName] === 'number') {\n    span.addEvent(performanceName, entries[performanceName]);\n    return span;\n  }\n\n  return undefined;\n}\n/**\n * Helper function for adding network events\n * @param span\n * @param resource\n */\n\nexport function addSpanNetworkEvents(span, resource) {\n  addSpanNetworkEvent(span, PTN.FETCH_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_END, resource);\n  addSpanNetworkEvent(span, PTN.CONNECT_START, resource);\n  addSpanNetworkEvent(span, PTN.SECURE_CONNECTION_START, resource);\n  addSpanNetworkEvent(span, PTN.CONNECT_END, resource);\n  addSpanNetworkEvent(span, PTN.REQUEST_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_END, resource);\n  var encodedLength = resource[PTN.ENCODED_BODY_SIZE];\n\n  if (encodedLength !== undefined) {\n    span.setAttribute(SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);\n  }\n\n  var decodedLength = resource[PTN.DECODED_BODY_SIZE]; // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)\n\n  if (decodedLength !== undefined && encodedLength !== decodedLength) {\n    span.setAttribute(SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);\n  }\n}\n/**\n * sort resources by startTime\n * @param filteredResources\n */\n\nexport function sortResources(filteredResources) {\n  return filteredResources.slice().sort(function (a, b) {\n    var valueA = a[PTN.FETCH_START];\n    var valueB = b[PTN.FETCH_START];\n\n    if (valueA > valueB) {\n      return 1;\n    } else if (valueA < valueB) {\n      return -1;\n    }\n\n    return 0;\n  });\n}\n/**\n * Get closest performance resource ignoring the resources that have been\n * already used.\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n * @param initiatorType\n */\n\nexport function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {\n  if (ignoredResources === void 0) {\n    ignoredResources = new WeakSet();\n  } // de-relativize the URL before usage (does no harm to absolute URLs)\n\n\n  var parsedSpanUrl = parseUrl(spanUrl);\n  spanUrl = parsedSpanUrl.toString();\n  var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);\n\n  if (filteredResources.length === 0) {\n    return {\n      mainRequest: undefined\n    };\n  }\n\n  if (filteredResources.length === 1) {\n    return {\n      mainRequest: filteredResources[0]\n    };\n  }\n\n  var sorted = sortResources(filteredResources);\n\n  if (parsedSpanUrl.origin !== location.origin && sorted.length > 1) {\n    var corsPreFlightRequest = sorted[0];\n    var mainRequest = findMainRequest(sorted, corsPreFlightRequest[PTN.RESPONSE_END], endTimeHR);\n    var responseEnd = corsPreFlightRequest[PTN.RESPONSE_END];\n    var fetchStart = mainRequest[PTN.FETCH_START]; // no corsPreFlightRequest\n\n    if (fetchStart < responseEnd) {\n      mainRequest = corsPreFlightRequest;\n      corsPreFlightRequest = undefined;\n    }\n\n    return {\n      corsPreFlightRequest: corsPreFlightRequest,\n      mainRequest: mainRequest\n    };\n  } else {\n    return {\n      mainRequest: filteredResources[0]\n    };\n  }\n}\n/**\n * Will find the main request skipping the cors pre flight requests\n * @param resources\n * @param corsPreFlightRequestEndTime\n * @param spanEndTimeHR\n */\n\nfunction findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {\n  var spanEndTime = hrTimeToNanoseconds(spanEndTimeHR);\n  var minTime = hrTimeToNanoseconds(timeInputToHrTime(corsPreFlightRequestEndTime));\n  var mainRequest = resources[1];\n  var bestGap;\n  var length = resources.length;\n\n  for (var i = 1; i < length; i++) {\n    var resource = resources[i];\n    var resourceStartTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.FETCH_START]));\n    var resourceEndTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.RESPONSE_END]));\n    var currentGap = spanEndTime - resourceEndTime;\n\n    if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {\n      bestGap = currentGap;\n      mainRequest = resource;\n    }\n  }\n\n  return mainRequest;\n}\n/**\n * Filter all resources that has started and finished according to span start time and end time.\n *     It will return the closest resource to a start time\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n */\n\n\nfunction filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {\n  var startTime = hrTimeToNanoseconds(startTimeHR);\n  var endTime = hrTimeToNanoseconds(endTimeHR);\n  var filteredResources = resources.filter(function (resource) {\n    var resourceStartTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.FETCH_START]));\n    var resourceEndTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.RESPONSE_END]));\n    return resource.initiatorType.toLowerCase() === (initiatorType || 'xmlhttprequest') && resource.name === spanUrl && resourceStartTime >= startTime && resourceEndTime <= endTime;\n  });\n\n  if (filteredResources.length > 0) {\n    filteredResources = filteredResources.filter(function (resource) {\n      return !ignoredResources.has(resource);\n    });\n  }\n\n  return filteredResources;\n}\n/**\n * Parses url using URL constructor or fallback to anchor element.\n * @param url\n */\n\n\nexport function parseUrl(url) {\n  if (typeof URL === 'function') {\n    return new URL(url, location.href);\n  }\n\n  var element = getUrlNormalizingAnchor();\n  element.href = url;\n  return element;\n}\n/**\n * Parses url using URL constructor or fallback to anchor element and serialize\n * it to a string.\n *\n * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url\n *\n * @param url\n */\n\nexport function normalizeUrl(url) {\n  var urlLike = parseUrl(url);\n  return urlLike.href;\n}\n/**\n * Get element XPath\n * @param target - target element\n * @param optimised - when id attribute of element is present the xpath can be\n * simplified to contain id\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\nexport function getElementXPath(target, optimised) {\n  if (target.nodeType === Node.DOCUMENT_NODE) {\n    return '/';\n  }\n\n  var targetValue = getNodeValue(target, optimised);\n\n  if (optimised && targetValue.indexOf('@id') > 0) {\n    return targetValue;\n  }\n\n  var xpath = '';\n\n  if (target.parentNode) {\n    xpath += getElementXPath(target.parentNode, false);\n  }\n\n  xpath += targetValue;\n  return xpath;\n}\n/**\n * get node index within the siblings\n * @param target\n */\n\nfunction getNodeIndex(target) {\n  if (!target.parentNode) {\n    return 0;\n  }\n\n  var allowedTypes = [target.nodeType];\n\n  if (target.nodeType === Node.CDATA_SECTION_NODE) {\n    allowedTypes.push(Node.TEXT_NODE);\n  }\n\n  var elements = Array.from(target.parentNode.childNodes);\n  elements = elements.filter(function (element) {\n    var localName = element.localName;\n    return allowedTypes.indexOf(element.nodeType) >= 0 && localName === target.localName;\n  });\n\n  if (elements.length >= 1) {\n    return elements.indexOf(target) + 1; // xpath starts from 1\n  } // if there are no other similar child xpath doesn't need index\n\n\n  return 0;\n}\n/**\n * get node value for xpath\n * @param target\n * @param optimised\n */\n\n\nfunction getNodeValue(target, optimised) {\n  var nodeType = target.nodeType;\n  var index = getNodeIndex(target);\n  var nodeValue = '';\n\n  if (nodeType === Node.ELEMENT_NODE) {\n    var id = target.getAttribute('id');\n\n    if (optimised && id) {\n      return \"//*[@id=\\\"\" + id + \"\\\"]\";\n    }\n\n    nodeValue = target.localName;\n  } else if (nodeType === Node.TEXT_NODE || nodeType === Node.CDATA_SECTION_NODE) {\n    nodeValue = 'text()';\n  } else if (nodeType === Node.COMMENT_NODE) {\n    nodeValue = 'comment()';\n  } else {\n    return '';\n  } // if index is 1 it can be omitted in xpath\n\n\n  if (nodeValue && index > 1) {\n    return \"/\" + nodeValue + \"[\" + index + \"]\";\n  }\n\n  return \"/\" + nodeValue;\n}\n/**\n * Checks if trace headers should be propagated\n * @param spanUrl\n * @private\n */\n\n\nexport function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {\n  var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];\n\n  if (typeof propagateTraceHeaderUrls === 'string' || propagateTraceHeaderUrls instanceof RegExp) {\n    propagateTraceHeaderUrls = [propagateTraceHeaderUrls];\n  }\n\n  var parsedSpanUrl = parseUrl(spanUrl);\n\n  if (parsedSpanUrl.origin === location.origin) {\n    return true;\n  } else {\n    return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {\n      return urlMatches(spanUrl, propagateTraceHeaderUrl);\n    });\n  }\n} //# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module"}