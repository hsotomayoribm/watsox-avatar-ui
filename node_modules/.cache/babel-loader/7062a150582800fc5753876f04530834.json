{"ast":null,"code":"/**\n * @module smwebsdk\n */\nimport { SmEvent } from './SmEvent';\n/**\n * Persona class to control a scene persona\n * @public\n */\n\nvar Persona =\n/** @class */\nfunction () {\n  /**\n   * @param scene - The scene the persona resides in\n   * @param personaId - The id of the persona as received in a state callback\n   */\n  function Persona(scene, personaId) {\n    this._scene = scene;\n    this._personaId = personaId;\n\n    if (!this._scene.onConversationResultEvents[personaId]) {\n      this._scene.onConversationResultEvents[personaId] = new SmEvent();\n    } // /** Event which will be triggered whenever conversation results are received. Use\n    //   *  onConversationResultEvents.addListener() to register a callback for this event.\n    //   *  The single parameter to the callback will be an object with the fields:\n    //   *    - **status**        - Status code\n    //   *    - **errorMessage**  - Optional error strubg\n    //   *    - **personaId**     - Numeric ID of Persona\n    //   *    - **output:**\n    //   *      - **text**        - Textual response from the converstation backend\n    //   *    - **context**       - Dictionary of public conversation variables\n    //   *    - **provider:**\n    //   *      - **kind**        - Conversation backend name, eg \"watson\"\n    //   *      - **meta**        - Conversation backend specific metadata\n    //   */\n\n\n    this._onConversationResultEvent = this._scene.onConversationResultEvents[personaId];\n\n    if (!this._scene.onSpeechMarkerEvents[personaId]) {\n      this._scene.onSpeechMarkerEvents[personaId] = new SmEvent();\n    } // /** Event which will be triggered whenever a speech marker is reached. Use\n    //   * onSpeechMarkerEvents.addListener() to register a callback for this event.\n    //   * A speech marker is triggered using the format @marker(markername, param0,... paramn)\n    //   * in speech. There are also other verbs which establish speech markers.\n    //   * Eg @showcards(cardA, cardB). When using a speech marker with Watson Assistant,\n    //   * the @ symbol must be escaped with a backslash, as follows:\n    //   * \\@marker(markername, param0,... paramn)\n    //   * The single parameter to the callback will be an object with the fields:\n    //   *    - **personaId**     - Numeric ID of Persona\n    //   *    - **name**          - Kind of speech marker, eg, \"showcards\", \"hidecards\"\n    //   *    - **arguements**    - Marker specific arguements.\n    //   */\n\n\n    this._onSpeechMarkerEvent = this._scene.onSpeechMarkerEvents[personaId];\n  }\n  /**\n   * Start speaking the given text\n   * @param text - The text to speak\n   * @param context - The context included in the transcript\n   * @param optionalArgs - Optional start speaking arguments or null\n   */\n\n\n  Persona.prototype.startSpeaking = function (text, context, optionalArgs) {\n    if (context === void 0) {\n      context = null;\n    }\n\n    if (optionalArgs === void 0) {\n      optionalArgs = null;\n    }\n\n    var body = {\n      personaId: this._personaId,\n      text: text\n    };\n\n    if (context) {\n      body.context = context;\n    }\n\n    if (optionalArgs) {\n      body.optionalArgs = optionalArgs;\n    }\n\n    return this._scene.sendRequest('startSpeaking', body);\n  };\n  /**\n   * Stop speaking\n   */\n\n\n  Persona.prototype.stopSpeaking = function () {\n    var body = {\n      personaId: this._personaId\n    };\n    return this._scene.sendRequest('stopSpeaking', body);\n  };\n  /**\n   * Send a chat message to conversation\n   * @param text - Text to send to conversation\n   * @param variables - Variables to send to the conversation provider\n   * @param optionalArgs - Optional arguments object (none currently supported)\n   */\n\n\n  Persona.prototype.conversationSend = function (text, variables, optionalArgs) {\n    var body = {\n      personaId: this._personaId,\n      text: text,\n      variables: variables,\n      optionalArgs: optionalArgs\n    };\n    return this._scene.sendRequest('conversationSend', body);\n  };\n  /**\n   * Set variables that will be applied on the next conversation request\n   * triggered by speech to text or a conversationSend()\n   * @param variables - Variables to send to the conversation provider\n   */\n\n\n  Persona.prototype.conversationSetVariables = function (variables) {\n    var body = {\n      personaId: this._personaId,\n      variables: variables\n    };\n    return this._scene.sendRequest('conversationSetVariables', body);\n  };\n  /**\n   * Get variables will return the current conversation variable values\n   * in the promise completion.\n   * Completion/promise receives an object with member 'variables'.\n   */\n\n\n  Persona.prototype.conversationGetVariables = function () {\n    var body = {\n      personaId: this._personaId\n    };\n    return this._scene.sendRequest('conversationGetVariables', body);\n  };\n  /**\n   * Cut or animate to a named camera position, with support for camera adjustment.\n   * @param cameraName - Named camera position. The currently supported option is \"CloseUp\".\n   * @param time - Time in seconds for the animation to run. 0 indicates a cut.\n   * @param orbitDegX - Degrees of horizontal rotation around implicit orbit point of camera position (typically the middle of the Persona's head)\n   * @param orbitDegY - Degrees of vertical rotation around implicit orbit point of camera position (typically the middle of the Persona's head)\n   * @param panDeg - Degrees of camera pan. Orbital adjustment is applied before pan adjustment.\n   * @param tiltDeg - Degrees of camera tilt. Orbital adjustment is applied before tilt adjustment.\n   */\n\n\n  Persona.prototype.animateToNamedCameraWithOrbitPan = function (cameraName, time, orbitDegX, orbitDegY, panDeg, tiltDeg) {\n    var body = {\n      personaId: this._personaId,\n      cameraName: cameraName,\n      time: time,\n      orbitDegX: orbitDegX,\n      orbitDegY: orbitDegY,\n      panDeg: panDeg,\n      tiltDeg: tiltDeg\n    };\n    return this._scene.sendRequest('animateToNamedCamera', body);\n  };\n  /**\n   * Play an animation.\n   * @internal\n   * @param animation - Structured animation data.\n   */\n\n\n  Persona.prototype.playAnimation = function (animation) {\n    var body = {\n      personaId: this._personaId,\n      animation: animation\n    };\n    return this._scene.sendRequest('playAnimation', body);\n  };\n  /**\n   * Get & Set bl variables.\n   * @internal\n   */\n\n\n  Persona.prototype.getVariables = function (names, errorTolerant, format) {\n    if (errorTolerant === void 0) {\n      errorTolerant = false;\n    }\n\n    if (format === void 0) {\n      format = '';\n    }\n\n    var body = {\n      personaId: this._personaId,\n      names: names,\n      errorTolerant: errorTolerant,\n      format: format\n    };\n    return this._scene.sendRequest('getVariables', body);\n  };\n  /**\n   * @internal\n   */\n\n\n  Persona.prototype.setVariables = function (variables) {\n    var body = {\n      personaId: this._personaId,\n      Variables: variables\n    };\n    return this._scene.sendRequest('setVariables', body);\n  };\n  /**\n   * @internal\n   */\n\n\n  Persona.prototype.setVariablesOneway = function (variables) {\n    var body = {\n      personaId: this._personaId,\n      Variables: variables\n    };\n\n    this._scene.sendOnewaySceneRequest('setVariables', body);\n  };\n  /**\n   * Get bl variables list.\n   * @internal\n   */\n\n\n  Persona.prototype.getVariablesList = function () {\n    var body = {\n      personaId: this._personaId\n    };\n    return this._scene.sendRequest('getVariablesList', body);\n  };\n  /**\n   * Get model bl variables list.\n   * @internal\n   */\n\n\n  Persona.prototype.getModelVariablesList = function (modelName) {\n    var body = {\n      personaId: this._personaId,\n      Models: modelName\n    };\n    return this._scene.sendRequest('getModelVariablesList', body);\n  };\n  /**\n   * Get model children.\n   * @internal\n   */\n\n\n  Persona.prototype.getModelChildren = function (modelName) {\n    var body = {\n      personaId: this._personaId,\n      Models: modelName\n    };\n    return this._scene.sendRequest('getModelChildren', body);\n  };\n  /**\n   * Get model list by snippet.\n   * @internal\n   */\n\n\n  Persona.prototype.getModelFilterSearchResult = function (modelName) {\n    var body = {\n      personaId: this._personaId,\n      Models: modelName\n    };\n    return this._scene.sendRequest('getModelFilterSearchResult', body);\n  };\n  /**\n   * Get model variable list by snippet.\n   * @internal\n   */\n\n\n  Persona.prototype.getModelVariableFilterSearchResult = function (variableName) {\n    var body = {\n      personaId: this._personaId,\n      Models: variableName\n    };\n    return this._scene.sendRequest('getModelVariableFilterSearchResult', body);\n  };\n  /**\n   * Get connector entries.\n   * @internal\n   */\n\n\n  Persona.prototype.getConnectorEntries = function (model) {\n    var body = {\n      personaId: this._personaId,\n      model: model\n    };\n    return this._scene.sendRequest('getConnectorEntries', body);\n  };\n  /**\n   * Start BL profiling.\n   * @internal\n   */\n\n\n  Persona.prototype.startBlProfiling = function () {\n    var body = {\n      personaId: this._personaId\n    };\n    return this._scene.sendRequest('startBlProfiling', body);\n  };\n  /**\n   * Stop BL profiling.\n   * @internal\n   */\n\n\n  Persona.prototype.stopBlProfiling = function (reverse) {\n    var body = {\n      personaId: this._personaId,\n      reverse: reverse\n    };\n    return this._scene.sendRequest('stopBlProfiling', body);\n  };\n  /**\n   * Get model hierarchy.\n   * @internal\n   */\n\n\n  Persona.prototype.getModelHierarchy = function (model) {\n    var body = {\n      personaId: this._personaId,\n      model: model\n    };\n    return this._scene.sendRequest('getModelHierarchy', body);\n  };\n  /**\n   * Monitor bl variables.\n   * @internal\n   */\n\n\n  Persona.prototype.createMonitorSet = function (setName, variables) {\n    var body = {\n      personaId: this._personaId,\n      setName: [{\n        SetName: setName\n      }],\n      variables: variables\n    };\n    return this._scene.sendRequest('createMonitorSet', body);\n  };\n  /**\n   * @internal\n   */\n\n\n  Persona.prototype.removeMonitorSet = function (setName) {\n    var body = {\n      personaId: this._personaId,\n      setName: [{\n        SetName: setName\n      }]\n    };\n    return this._scene.sendRequest('removeMonitorSet', body);\n  };\n  /**\n   * @internal\n   */\n\n\n  Persona.prototype.addVariableToMonitorSet = function (setName, variables) {\n    var body = {\n      personaId: this._personaId,\n      setName: [{\n        SetName: setName\n      }],\n      variables: variables\n    };\n    return this._scene.sendRequest('addVariableToMonitorSet', body);\n  };\n  /**\n   * @internal\n   */\n\n\n  Persona.prototype.removeVariableFromMonitorSet = function (setName, variables) {\n    var body = {\n      personaId: this._personaId,\n      setName: [{\n        SetName: setName\n      }],\n      variables: variables\n    };\n    return this._scene.sendRequest('removeVariableFromMonitorSet', body);\n  };\n  /**\n   * @internal\n   */\n\n\n  Persona.prototype.renderModel = function (modelName) {\n    var body = {\n      personaId: this._personaId,\n      modelName: modelName\n    };\n    return this._scene.sendRequest('renderModel', body);\n  };\n\n  Object.defineProperty(Persona.prototype, \"onConversationResultEvent\", {\n    get: function () {\n      return this._onConversationResultEvent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Persona.prototype, \"onSpeechMarkerEvent\", {\n    get: function () {\n      return this._onSpeechMarkerEvent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Persona;\n}();\n\nexport { Persona }; //# sourceMappingURL=Persona.js.map","map":null,"metadata":{},"sourceType":"module"}