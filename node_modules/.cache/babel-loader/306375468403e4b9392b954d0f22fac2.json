{"ast":null,"code":"/**\n * @module smwebsdk\n */\n\n/*\n * Copyright 2017-2020 Soul Machines Ltd. All Rights Reserved.\n */\n\n/**\n * An event which can have a set of listeners registered against it using addListener().\n * @public\n */\nvar SmEvent =\n/** @class */\nfunction () {\n  function SmEvent() {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    this._callbacks = [];\n  }\n  /**\n   * Register a new listener for this event.\n   * @param callback - Function called each time the event is triggered.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  SmEvent.prototype.addListener = function (callback) {\n    this._callbacks.push(callback);\n  };\n  /**\n   * Deregister a existing listener for this event.\n   * @param callback - Previously registered function to be removed. It is a safe no-op to pass\n   * a callback which was never registered against this event.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  SmEvent.prototype.removeListener = function (callback) {\n    var callbackIndex = this._callbacks.indexOf(callback);\n\n    if (callbackIndex > -1) {\n      this._callbacks.splice(callbackIndex, 1);\n    }\n  };\n  /**\n   * Trigger the event, calling each registered listener, and passing on any parameters.\n   */\n\n\n  SmEvent.prototype.call = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._callbacks.forEach(function (callback) {\n      callback.apply(callback, args);\n    }, this);\n  };\n\n  return SmEvent;\n}();\n\nexport { SmEvent }; //# sourceMappingURL=SmEvent.js.map","map":null,"metadata":{},"sourceType":"module"}