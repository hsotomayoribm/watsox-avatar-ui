{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\n/**\n * An internal record for shared meter provider states.\n */\n\nvar MeterProviderSharedState =\n/** @class */\nfunction () {\n  function MeterProviderSharedState(resource) {\n    this.resource = resource;\n    this.viewRegistry = new ViewRegistry();\n    this.metricCollectors = [];\n    this.meterSharedStates = new Map();\n  }\n\n  MeterProviderSharedState.prototype.getMeterSharedState = function (instrumentationScope) {\n    var id = instrumentationScopeId(instrumentationScope);\n    var meterSharedState = this.meterSharedStates.get(id);\n\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n\n    return meterSharedState;\n  };\n\n  MeterProviderSharedState.prototype.selectAggregations = function (instrumentType) {\n    var e_1, _a;\n\n    var result = [];\n\n    try {\n      for (var _b = __values(this.metricCollectors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var collector = _c.value;\n        result.push([collector, collector.selectAggregation(instrumentType)]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return result;\n  };\n\n  return MeterProviderSharedState;\n}();\n\nexport { MeterProviderSharedState }; //# sourceMappingURL=MeterProviderSharedState.js.map","map":null,"metadata":{},"sourceType":"module"}