{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as api from '@opentelemetry/api';\nimport * as metrics from '@opentelemetry/api-metrics';\nimport { hrTime } from '@opentelemetry/core';\n\nvar SyncInstrument =\n/** @class */\nfunction () {\n  function SyncInstrument(_writableMetricStorage, _descriptor) {\n    this._writableMetricStorage = _writableMetricStorage;\n    this._descriptor = _descriptor;\n  }\n\n  SyncInstrument.prototype._record = function (value, attributes, context) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    if (context === void 0) {\n      context = api.context.active();\n    }\n\n    if (this._descriptor.valueType === metrics.ValueType.INT && !Number.isInteger(value)) {\n      api.diag.warn(\"INT value type cannot accept a floating-point value for \" + this._descriptor.name + \", ignoring the fractional digits.\");\n      value = Math.trunc(value);\n    }\n\n    this._writableMetricStorage.record(value, attributes, context, hrTime());\n  };\n\n  return SyncInstrument;\n}();\n\nexport { SyncInstrument };\n/**\n * The class implements {@link metrics.UpDownCounter} interface.\n */\n\nvar UpDownCounterInstrument =\n/** @class */\nfunction (_super) {\n  __extends(UpDownCounterInstrument, _super);\n\n  function UpDownCounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n\n\n  UpDownCounterInstrument.prototype.add = function (value, attributes, ctx) {\n    this._record(value, attributes, ctx);\n  };\n\n  return UpDownCounterInstrument;\n}(SyncInstrument);\n\nexport { UpDownCounterInstrument };\n/**\n * The class implements {@link metrics.Counter} interface.\n */\n\nvar CounterInstrument =\n/** @class */\nfunction (_super) {\n  __extends(CounterInstrument, _super);\n\n  function CounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n\n\n  CounterInstrument.prototype.add = function (value, attributes, ctx) {\n    if (value < 0) {\n      api.diag.warn(\"negative value provided to counter \" + this._descriptor.name + \": \" + value);\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  };\n\n  return CounterInstrument;\n}(SyncInstrument);\n\nexport { CounterInstrument };\n/**\n * The class implements {@link metrics.Histogram} interface.\n */\n\nvar HistogramInstrument =\n/** @class */\nfunction (_super) {\n  __extends(HistogramInstrument, _super);\n\n  function HistogramInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n\n\n  HistogramInstrument.prototype.record = function (value, attributes, ctx) {\n    if (value < 0) {\n      api.diag.warn(\"negative value provided to histogram \" + this._descriptor.name + \": \" + value);\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  };\n\n  return HistogramInstrument;\n}(SyncInstrument);\n\nexport { HistogramInstrument };\n\nvar ObservableInstrument =\n/** @class */\nfunction () {\n  function ObservableInstrument(descriptor, metricStorages, _observableRegistry) {\n    this._observableRegistry = _observableRegistry;\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n  /**\n   * @see {metrics.Observable.addCallback}\n   */\n\n\n  ObservableInstrument.prototype.addCallback = function (callback) {\n    this._observableRegistry.addCallback(callback, this);\n  };\n  /**\n   * @see {metrics.Observable.removeCallback}\n   */\n\n\n  ObservableInstrument.prototype.removeCallback = function (callback) {\n    this._observableRegistry.removeCallback(callback, this);\n  };\n\n  return ObservableInstrument;\n}();\n\nexport { ObservableInstrument };\n\nvar ObservableCounterInstrument =\n/** @class */\nfunction (_super) {\n  __extends(ObservableCounterInstrument, _super);\n\n  function ObservableCounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ObservableCounterInstrument;\n}(ObservableInstrument);\n\nexport { ObservableCounterInstrument };\n\nvar ObservableGaugeInstrument =\n/** @class */\nfunction (_super) {\n  __extends(ObservableGaugeInstrument, _super);\n\n  function ObservableGaugeInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ObservableGaugeInstrument;\n}(ObservableInstrument);\n\nexport { ObservableGaugeInstrument };\n\nvar ObservableUpDownCounterInstrument =\n/** @class */\nfunction (_super) {\n  __extends(ObservableUpDownCounterInstrument, _super);\n\n  function ObservableUpDownCounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ObservableUpDownCounterInstrument;\n}(ObservableInstrument);\n\nexport { ObservableUpDownCounterInstrument };\nexport function isObservableInstrument(it) {\n  return it instanceof ObservableInstrument;\n} //# sourceMappingURL=Instruments.js.map","map":null,"metadata":{},"sourceType":"module"}