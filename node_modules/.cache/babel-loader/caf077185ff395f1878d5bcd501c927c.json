{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\n\nvar W3CBaggagePropagator =\n/** @class */\nfunction () {\n  function W3CBaggagePropagator() {}\n\n  W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n    var baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    var keyPairs = getKeyPairs(baggage).filter(function (pair) {\n      return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n    }).slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    var headerValue = serializeKeyPairs(keyPairs);\n\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  };\n\n  W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n    var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    var baggageString = Array.isArray(headerValue) ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR) : headerValue;\n    if (!baggageString) return context;\n    var baggage = {};\n\n    if (baggageString.length === 0) {\n      return context;\n    }\n\n    var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(function (entry) {\n      var keyPair = parsePairKeyValue(entry);\n\n      if (keyPair) {\n        var baggageEntry = {\n          value: keyPair.value\n        };\n\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  };\n\n  W3CBaggagePropagator.prototype.fields = function () {\n    return [BAGGAGE_HEADER];\n  };\n\n  return W3CBaggagePropagator;\n}();\n\nexport { W3CBaggagePropagator }; //# sourceMappingURL=W3CBaggagePropagator.js.map","map":null,"metadata":{},"sourceType":"module"}