{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\n\nvar EnvDetectorSync =\n/** @class */\nfunction () {\n  function EnvDetectorSync() {\n    // Type, attribute keys, and attribute values should not exceed 256 characters.\n    this._MAX_LENGTH = 255; // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n\n    this._COMMA_SEPARATOR = ','; // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n\n    this._LABEL_KEY_VALUE_SPLITTER = '=';\n    this._ERROR_MESSAGE_INVALID_CHARS = 'should be a ASCII string with a length greater than 0 and not exceed ' + this._MAX_LENGTH + ' characters.';\n    this._ERROR_MESSAGE_INVALID_VALUE = 'should be a ASCII string with a length not exceed ' + this._MAX_LENGTH + ' characters.';\n  }\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n\n\n  EnvDetectorSync.prototype.detect = function (_config) {\n    var attributes = {};\n    var env = getEnv();\n    var rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    var serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        var parsedAttributes = this._parseResourceAttributes(rawAttributes);\n\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(\"EnvDetector failed: \" + e.message);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  };\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n\n\n  EnvDetectorSync.prototype._parseResourceAttributes = function (rawEnvAttributes) {\n    var e_1, _a;\n\n    if (!rawEnvAttributes) return {};\n    var attributes = {};\n    var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);\n\n    try {\n      for (var rawAttributes_1 = __values(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {\n        var rawAttribute = rawAttributes_1_1.value;\n        var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);\n\n        if (keyValuePair.length !== 2) {\n          continue;\n        }\n\n        var _b = __read(keyValuePair, 2),\n            key = _b[0],\n            value = _b[1]; // Leading and trailing whitespaces are trimmed.\n\n\n        key = key.trim();\n        value = value.trim().split(/^\"|\"$/).join('');\n\n        if (!this._isValidAndNotEmpty(key)) {\n          throw new Error(\"Attribute key \" + this._ERROR_MESSAGE_INVALID_CHARS);\n        }\n\n        if (!this._isValid(value)) {\n          throw new Error(\"Attribute value \" + this._ERROR_MESSAGE_INVALID_VALUE);\n        }\n\n        attributes[key] = decodeURIComponent(value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a = rawAttributes_1.return)) _a.call(rawAttributes_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return attributes;\n  };\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n\n\n  EnvDetectorSync.prototype._isValid = function (name) {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }; // https://www.w3.org/TR/baggage/#definition\n\n\n  EnvDetectorSync.prototype._isBaggageOctetString = function (str) {\n    for (var i = 0; i < str.length; i++) {\n      var ch = str.charCodeAt(i);\n\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n\n\n  EnvDetectorSync.prototype._isValidAndNotEmpty = function (str) {\n    return str.length > 0 && this._isValid(str);\n  };\n\n  return EnvDetectorSync;\n}();\n\nexport var envDetectorSync = new EnvDetectorSync(); //# sourceMappingURL=EnvDetectorSync.js.map","map":null,"metadata":{},"sourceType":"module"}