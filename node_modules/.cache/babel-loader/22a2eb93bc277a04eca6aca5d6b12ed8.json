{"ast":null,"code":"import { hrTimeToNanoseconds } from '@opentelemetry/core';\nimport { toAttributes } from '../common/internal';\nimport * as core from '@opentelemetry/core';\nexport function sdkSpanToOtlpSpan(span, useHex) {\n  var ctx = span.spanContext();\n  var status = span.status;\n  var parentSpanId = useHex ? span.parentSpanId : span.parentSpanId != null ? core.hexToBase64(span.parentSpanId) : undefined;\n  return {\n    traceId: useHex ? ctx.traceId : core.hexToBase64(ctx.traceId),\n    spanId: useHex ? ctx.spanId : core.hexToBase64(ctx.spanId),\n    parentSpanId: parentSpanId,\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: hrTimeToNanoseconds(span.startTime),\n    endTimeUnixNano: hrTimeToNanoseconds(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: 0,\n    events: span.events.map(toOtlpSpanEvent),\n    droppedEventsCount: 0,\n    status: {\n      // API and proto enums share the same values\n      code: status.code,\n      message: status.message\n    },\n    links: span.links.map(function (link) {\n      return toOtlpLink(link, useHex);\n    }),\n    droppedLinksCount: 0\n  };\n}\nexport function toOtlpLink(link, useHex) {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: useHex ? link.context.spanId : core.hexToBase64(link.context.spanId),\n    traceId: useHex ? link.context.traceId : core.hexToBase64(link.context.traceId),\n    droppedAttributesCount: 0\n  };\n}\nexport function toOtlpSpanEvent(timedEvent) {\n  return {\n    attributes: timedEvent.attributes ? toAttributes(timedEvent.attributes) : [],\n    name: timedEvent.name,\n    timeUnixNano: hrTimeToNanoseconds(timedEvent.time),\n    droppedAttributesCount: 0\n  };\n} //# sourceMappingURL=internal.js.map","map":null,"metadata":{},"sourceType":"module"}