{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Resource } from './Resource';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourceSync() instead.\n * @param config Configuration for resource detection\n */\n\nexport var detectResources = function (config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var resources;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , Promise.all((config.detectors || []).map(function (d) {\n            return __awaiter(void 0, void 0, void 0, function () {\n              var resource, e_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    _a.trys.push([0, 2,, 3]);\n\n                    return [4\n                    /*yield*/\n                    , d.detect(config)];\n\n                  case 1:\n                    resource = _a.sent();\n                    diag.debug(d.constructor.name + \" found resource.\", resource);\n                    return [2\n                    /*return*/\n                    , resource];\n\n                  case 2:\n                    e_1 = _a.sent();\n                    diag.debug(d.constructor.name + \" failed: \" + e_1.message);\n                    return [2\n                    /*return*/\n                    , Resource.empty()];\n\n                  case 3:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }))];\n\n        case 1:\n          resources = _a.sent(); // Future check if verbose logging is enabled issue #1903\n\n          logResources(resources);\n          return [2\n          /*return*/\n          , resources.reduce(function (acc, resource) {\n            return acc.merge(resource);\n          }, Resource.empty())];\n      }\n    });\n  });\n};\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\n\nexport var detectResourcesSync = function (config) {\n  var _a;\n\n  if (config === void 0) {\n    config = {};\n  }\n\n  var resources = ((_a = config.detectors) !== null && _a !== void 0 ? _a : []).map(function (d) {\n    try {\n      var resourceOrPromise_1 = d.detect(config);\n      var resource_1;\n\n      if (isPromiseLike(resourceOrPromise_1)) {\n        var createPromise = function () {\n          return __awaiter(void 0, void 0, void 0, function () {\n            var resolvedResource;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , resourceOrPromise_1];\n\n                case 1:\n                  resolvedResource = _a.sent();\n                  return [2\n                  /*return*/\n                  , resolvedResource.attributes];\n              }\n            });\n          });\n        };\n\n        resource_1 = new Resource({}, createPromise());\n      } else {\n        resource_1 = resourceOrPromise_1;\n      }\n\n      if (resource_1.waitForAsyncAttributes) {\n        void resource_1.waitForAsyncAttributes().then(function () {\n          return diag.debug(d.constructor.name + \" found resource.\", resource_1);\n        });\n      } else {\n        diag.debug(d.constructor.name + \" found resource.\", resource_1);\n      }\n\n      return resource_1;\n    } catch (e) {\n      diag.error(d.constructor.name + \" failed: \" + e.message);\n      return Resource.empty();\n    }\n  });\n  var mergedResources = resources.reduce(function (acc, resource) {\n    return acc.merge(resource);\n  }, Resource.empty());\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(function () {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\n\nvar logResources = function (resources) {\n  resources.forEach(function (resource) {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      var resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n}; //# sourceMappingURL=detect-resources.js.map","map":null,"metadata":{},"sourceType":"module"}