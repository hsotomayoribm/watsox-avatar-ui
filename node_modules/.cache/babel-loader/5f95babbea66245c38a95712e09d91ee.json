{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\n\nvar InMemoryMetricExporter =\n/** @class */\nfunction () {\n  function InMemoryMetricExporter(aggregationTemporality) {\n    this._shutdown = false;\n    this._metrics = [];\n    this._aggregationTemporality = aggregationTemporality;\n  }\n  /**\n   * @inheritedDoc\n   */\n\n\n  InMemoryMetricExporter.prototype.export = function (metrics, resultCallback) {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(function () {\n        return resultCallback({\n          code: ExportResultCode.FAILED\n        });\n      }, 0);\n      return;\n    }\n\n    this._metrics.push(metrics);\n\n    setTimeout(function () {\n      return resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }, 0);\n  };\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n\n\n  InMemoryMetricExporter.prototype.getMetrics = function () {\n    return this._metrics;\n  };\n\n  InMemoryMetricExporter.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n\n  InMemoryMetricExporter.prototype.reset = function () {\n    this._metrics = [];\n  };\n\n  InMemoryMetricExporter.prototype.selectAggregationTemporality = function (_instrumentType) {\n    return this._aggregationTemporality;\n  };\n\n  InMemoryMetricExporter.prototype.shutdown = function () {\n    this._shutdown = true;\n    return Promise.resolve();\n  };\n\n  return InMemoryMetricExporter;\n}();\n\nexport { InMemoryMetricExporter }; //# sourceMappingURL=InMemoryMetricExporter.js.map","map":null,"metadata":{},"sourceType":"module"}