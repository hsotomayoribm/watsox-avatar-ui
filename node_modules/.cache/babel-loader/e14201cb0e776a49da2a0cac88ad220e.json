{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\n\nexport function loggingErrorHandler() {\n  return function (ex) {\n    diag.error(stringifyException(ex));\n  };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\n\nfunction stringifyException(ex) {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\n\n\nfunction flattenException(ex) {\n  var result = {};\n  var current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n      if (result[propertyName]) return;\n      var value = current[propertyName];\n\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n} //# sourceMappingURL=logging-error-handler.js.map","map":null,"metadata":{},"sourceType":"module"}