{"ast":null,"code":"/**\n * @module smwebsdk\n */\nimport { ConversationStateTypes } from './enums/ConversationStateTypes';\nimport { SmEvent } from './SmEvent';\nimport { SpeechState } from './websocket-message/enums/SpeechState';\nimport { Logger } from './utils/Logger';\n/**\n * Determines and stores Conversation State.\n *\n * @public\n */\n\nvar ConversationState =\n/** @class */\nfunction () {\n  function ConversationState(logger) {\n    if (logger === void 0) {\n      logger = new Logger();\n    }\n\n    this.logger = logger;\n    this._conversationState = ConversationStateTypes.idle;\n    this._userActive = false;\n    this._onConversationStateUpdated = new SmEvent();\n  }\n\n  ConversationState.prototype.processStateMessage = function (responseBody) {\n    if (responseBody && responseBody.persona && Object.keys(responseBody.persona).length > 0) {\n      var dpId = Object.keys(responseBody.persona)[0];\n\n      if (!this._userActive && responseBody.persona[dpId].speechState) {\n        var messageSpeechState = responseBody.persona[dpId].speechState;\n\n        if (messageSpeechState === SpeechState.Idle) {\n          this.setSpeechState(ConversationStateTypes.idle);\n        } else if (messageSpeechState === SpeechState.Speaking) {\n          this.setSpeechState(ConversationStateTypes.dpSpeaking);\n        }\n      }\n    }\n  };\n\n  ConversationState.prototype.processRecognizeResultsMessage = function (responseBody) {\n    this._userActive = true;\n    var isErrorMessage = responseBody.status !== 0;\n    var isFinal = responseBody.results && responseBody.results.some(function (result) {\n      return result.final;\n    });\n\n    if (isErrorMessage) {\n      var errorMessage = typeof responseBody.errorMessage !== 'undefined' ? responseBody.errorMessage : 'recognizeResults sent back a message with non-zero status but no error message.';\n      this.logger.log('error', errorMessage);\n    } else if (isFinal) {\n      this.setSpeechState(ConversationStateTypes.dpProcessing);\n    } else {\n      this.setSpeechState(ConversationStateTypes.userSpeaking);\n    }\n\n    this._userActive = false;\n  };\n\n  ConversationState.prototype.setSpeechState = function (speechState) {\n    if (this._conversationState !== speechState) {\n      this._conversationState = speechState;\n\n      this._onConversationStateUpdated.call(this._conversationState);\n    }\n  };\n\n  ConversationState.prototype.getSpeechState = function () {\n    return this._conversationState;\n  };\n\n  Object.defineProperty(ConversationState.prototype, \"onConversationStateUpdated\", {\n    get: function () {\n      return this._onConversationStateUpdated;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ConversationState.prototype.reset = function () {\n    this._userActive = false;\n    this._conversationState = ConversationStateTypes.idle;\n\n    this._onConversationStateUpdated.call(this._conversationState);\n  };\n\n  return ConversationState;\n}();\n\nexport { ConversationState }; //# sourceMappingURL=ConversationState.js.map","map":null,"metadata":{},"sourceType":"module"}