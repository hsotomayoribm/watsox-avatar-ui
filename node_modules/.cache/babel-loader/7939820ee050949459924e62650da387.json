{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\n\nvar TraceIdRatioBasedSampler =\n/** @class */\nfunction () {\n  function TraceIdRatioBasedSampler(_ratio) {\n    if (_ratio === void 0) {\n      _ratio = 0;\n    }\n\n    this._ratio = _ratio;\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n    return {\n      decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD\n    };\n  };\n\n  TraceIdRatioBasedSampler.prototype.toString = function () {\n    return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n  };\n\n  TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  };\n\n  TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n    var accumulation = 0;\n\n    for (var i = 0; i < traceId.length / 8; i++) {\n      var pos = i * 8;\n      var part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n\n    return accumulation;\n  };\n\n  return TraceIdRatioBasedSampler;\n}();\n\nexport { TraceIdRatioBasedSampler }; //# sourceMappingURL=TraceIdRatioBasedSampler.js.map","map":null,"metadata":{},"sourceType":"module"}