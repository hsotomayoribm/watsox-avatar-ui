{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { SmEvent } from './SmEvent';\nimport { Logger } from './utils/Logger';\nimport { SpeechMarkerName } from './websocket-message/scene/response-body/SpeechMarker';\nimport { ConversationState } from './ConversationState';\nimport { ContentCardFormatter } from './ContentCardFormatter';\n/**\n * Stores content cards and conversation state\n *\n * @public\n */\n\nvar Conversation =\n/** @class */\nfunction () {\n  function Conversation(logger, conversationState, contentCardFormatter) {\n    if (logger === void 0) {\n      logger = new Logger();\n    }\n\n    if (conversationState === void 0) {\n      conversationState = new ConversationState();\n    }\n\n    if (contentCardFormatter === void 0) {\n      contentCardFormatter = new ContentCardFormatter();\n    }\n\n    this.logger = logger;\n    this.conversationState = conversationState;\n    this.contentCardFormatter = contentCardFormatter;\n    this._onCardChanged = new SmEvent();\n    this._autoClearCards = false;\n    this.cardData = new Map();\n    this.activeCardIds = new Set();\n  }\n\n  Conversation.prototype.processStateMessage = function (message) {\n    this.conversationState.processStateMessage(message);\n  };\n\n  Conversation.prototype.processRecognizeResultsMessage = function (message) {\n    this.conversationState.processRecognizeResultsMessage(message);\n  };\n\n  Object.defineProperty(Conversation.prototype, \"onConversationStateUpdated\", {\n    /**\n     * A callback function which fires when conversation state changes\n     */\n    get: function () {\n      return this.conversationState.onConversationStateUpdated;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Conversation.prototype, \"autoClearCards\", {\n    /**\n     * Automatically clear active content cards each conversation turn\n     */\n    set: function (enabled) {\n      this._autoClearCards = enabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Conversation.prototype, \"onCardChanged\", {\n    /**\n     * A callback function which fires when active cards are changed\n     */\n    get: function () {\n      return this._onCardChanged;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Conversation.prototype, \"activeCards\", {\n    get: function () {\n      var _this = this;\n\n      var activeCardInfo = [];\n      this.activeCardIds.forEach(function (id) {\n        var data = _this.cardData.get(id);\n\n        if (data) {\n          activeCardInfo.push(data);\n        } else {\n          _this.logger.log('error', \"card data for \".concat(id, \" does not exist\"));\n        }\n      });\n      return activeCardInfo;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Handles speech marker messages and updates the active card state\n   */\n\n  Conversation.prototype.onSpeechMarker = function (messageBody) {\n    var cardIds = messageBody.arguments;\n\n    if (messageBody.name === SpeechMarkerName.Showcards) {\n      this.addActiveCardIds(cardIds);\n    } else if (messageBody.name === SpeechMarkerName.Hidecards) {\n      this.removeActiveCards(cardIds);\n    }\n\n    if ( // Hide all cards when arg list is empty and hidecards message is received\n    cardIds.length === 0 && messageBody.name === SpeechMarkerName.Hidecards) {\n      this.clearActiveCards();\n    }\n  };\n  /**\n   * Stores content card data contained in conversation result messages\n   */\n\n\n  Conversation.prototype.onConversationResult = function (messageBody) {\n    var _this = this;\n\n    var cards = this.contentCardFormatter.format(messageBody);\n\n    if (this._autoClearCards) {\n      this.clearActiveCards();\n    }\n\n    cards.map(function (_a) {\n      var id = _a.id,\n          data = _a.data;\n\n      _this.cardData.set(id, data);\n    });\n  };\n  /**\n   * Clears active card ids and data. Emits a card changed event\n   */\n\n\n  Conversation.prototype.reset = function () {\n    this.clearActiveCards();\n    this.cardData.clear();\n    this.conversationState.reset();\n  };\n  /**\n   * Clears active card ids. Emits a card changed event\n   */\n\n\n  Conversation.prototype.clearActiveCards = function () {\n    this.activeCardIds.clear();\n    this.onCardChanged.call(this.activeCards);\n  };\n\n  Conversation.prototype.addActiveCardIds = function (cardIds) {\n    this.activeCardIds = new Set(__spreadArray(__spreadArray([], __read(this.activeCardIds), false), __read(cardIds), false));\n    this.onCardChanged.call(this.activeCards);\n  };\n\n  Conversation.prototype.removeActiveCards = function (cardIds) {\n    var _this = this;\n\n    cardIds.forEach(function (cardId) {\n      return _this.activeCardIds.delete(cardId);\n    });\n    this.onCardChanged.call(this.activeCards);\n  };\n\n  return Conversation;\n}();\n\nexport { Conversation }; //# sourceMappingURL=Conversation.js.map","map":null,"metadata":{},"sourceType":"module"}