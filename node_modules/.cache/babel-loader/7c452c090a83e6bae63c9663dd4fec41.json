{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { MetricStorage } from './MetricStorage';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\n\nvar SyncMetricStorage =\n/** @class */\nfunction (_super) {\n  __extends(SyncMetricStorage, _super);\n\n  function SyncMetricStorage(instrumentDescriptor, aggregator, _attributesProcessor) {\n    var _this = _super.call(this, instrumentDescriptor) || this;\n\n    _this._attributesProcessor = _attributesProcessor;\n    _this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    _this._temporalMetricStorage = new TemporalMetricProcessor(aggregator);\n    return _this;\n  }\n\n  SyncMetricStorage.prototype.record = function (value, attributes, context, recordTime) {\n    attributes = this._attributesProcessor.process(attributes, context);\n\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  };\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n\n\n  SyncMetricStorage.prototype.collect = function (collector, collectors, collectionTime) {\n    var accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(collector, collectors, this._instrumentDescriptor, accumulations, collectionTime);\n  };\n\n  return SyncMetricStorage;\n}(MetricStorage);\n\nexport { SyncMetricStorage }; //# sourceMappingURL=SyncMetricStorage.js.map","map":null,"metadata":{},"sourceType":"module"}