{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ValueType } from '@opentelemetry/api-metrics';\n/**\n * Supported types of metric instruments.\n */\n\nexport var InstrumentType;\n\n(function (InstrumentType) {\n  InstrumentType[\"COUNTER\"] = \"COUNTER\";\n  InstrumentType[\"HISTOGRAM\"] = \"HISTOGRAM\";\n  InstrumentType[\"UP_DOWN_COUNTER\"] = \"UP_DOWN_COUNTER\";\n  InstrumentType[\"OBSERVABLE_COUNTER\"] = \"OBSERVABLE_COUNTER\";\n  InstrumentType[\"OBSERVABLE_GAUGE\"] = \"OBSERVABLE_GAUGE\";\n  InstrumentType[\"OBSERVABLE_UP_DOWN_COUNTER\"] = \"OBSERVABLE_UP_DOWN_COUNTER\";\n})(InstrumentType || (InstrumentType = {}));\n\nexport function createInstrumentDescriptor(name, type, options) {\n  var _a, _b, _c;\n\n  return {\n    name: name,\n    type: type,\n    description: (_a = options === null || options === void 0 ? void 0 : options.description) !== null && _a !== void 0 ? _a : '',\n    unit: (_b = options === null || options === void 0 ? void 0 : options.unit) !== null && _b !== void 0 ? _b : '',\n    valueType: (_c = options === null || options === void 0 ? void 0 : options.valueType) !== null && _c !== void 0 ? _c : ValueType.DOUBLE\n  };\n}\nexport function createInstrumentDescriptorWithView(view, instrument) {\n  var _a, _b;\n\n  return {\n    name: (_a = view.name) !== null && _a !== void 0 ? _a : instrument.name,\n    description: (_b = view.description) !== null && _b !== void 0 ? _b : instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType\n  };\n}\nexport function isDescriptorCompatibleWith(descriptor, otherDescriptor) {\n  return descriptor.name === otherDescriptor.name && descriptor.unit === otherDescriptor.unit && descriptor.type === otherDescriptor.type && descriptor.valueType === otherDescriptor.valueType;\n} //# sourceMappingURL=InstrumentDescriptor.js.map","map":null,"metadata":{},"sourceType":"module"}