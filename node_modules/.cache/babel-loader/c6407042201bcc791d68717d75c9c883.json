{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// https://tc39.es/proposal-regex-escaping\n// escape ^ $ \\ .  + ? ( ) [ ] { } |\n// do not need to escape * as we interpret it as wildcard\nvar ESCAPE = /[\\^$\\\\.+?()[\\]{}|]/g;\n/**\n * Wildcard pattern predicate, supports patterns like `*`, `foo*`, `*bar`.\n */\n\nvar PatternPredicate =\n/** @class */\nfunction () {\n  function PatternPredicate(pattern) {\n    if (pattern === '*') {\n      this._matchAll = true;\n      this._regexp = /.*/;\n    } else {\n      this._matchAll = false;\n      this._regexp = new RegExp(PatternPredicate.escapePattern(pattern));\n    }\n  }\n\n  PatternPredicate.prototype.match = function (str) {\n    if (this._matchAll) {\n      return true;\n    }\n\n    return this._regexp.test(str);\n  };\n\n  PatternPredicate.escapePattern = function (pattern) {\n    return \"^\" + pattern.replace(ESCAPE, '\\\\$&').replace('*', '.*') + \"$\";\n  };\n\n  PatternPredicate.hasWildcard = function (pattern) {\n    return pattern.includes('*');\n  };\n\n  return PatternPredicate;\n}();\n\nexport { PatternPredicate };\n\nvar ExactPredicate =\n/** @class */\nfunction () {\n  function ExactPredicate(pattern) {\n    this._matchAll = pattern === undefined;\n    this._pattern = pattern;\n  }\n\n  ExactPredicate.prototype.match = function (str) {\n    if (this._matchAll) {\n      return true;\n    }\n\n    if (str === this._pattern) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return ExactPredicate;\n}();\n\nexport { ExactPredicate }; //# sourceMappingURL=Predicate.js.map","map":null,"metadata":{},"sourceType":"module"}