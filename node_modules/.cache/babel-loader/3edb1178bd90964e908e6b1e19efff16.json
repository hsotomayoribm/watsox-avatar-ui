{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\n\nvar BatchSpanProcessor =\n/** @class */\nfunction (_super) {\n  __extends(BatchSpanProcessor, _super);\n\n  function BatchSpanProcessor(_exporter, config) {\n    var _this = _super.call(this, _exporter, config) || this;\n\n    _this.onInit(config);\n\n    return _this;\n  }\n\n  BatchSpanProcessor.prototype.onInit = function (config) {\n    var _this = this;\n\n    if ((config === null || config === void 0 ? void 0 : config.disableAutoFlushOnDocumentHide) !== true && typeof document !== 'undefined') {\n      this._visibilityChangeListener = function () {\n        if (document.visibilityState === 'hidden') {\n          void _this.forceFlush();\n        }\n      };\n\n      this._pageHideListener = function () {\n        void _this.forceFlush();\n      };\n\n      document.addEventListener('visibilitychange', this._visibilityChangeListener); // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769\n\n      document.addEventListener('pagehide', this._pageHideListener);\n    }\n  };\n\n  BatchSpanProcessor.prototype.onShutdown = function () {\n    if (typeof document !== 'undefined') {\n      if (this._visibilityChangeListener) {\n        document.removeEventListener('visibilitychange', this._visibilityChangeListener);\n      }\n\n      if (this._pageHideListener) {\n        document.removeEventListener('pagehide', this._pageHideListener);\n      }\n    }\n  };\n\n  return BatchSpanProcessor;\n}(BatchSpanProcessorBase);\n\nexport { BatchSpanProcessor }; //# sourceMappingURL=BatchSpanProcessor.js.map","map":null,"metadata":{},"sourceType":"module"}