import React, { useState, useEffect } from 'react';

var styles = {"alertDangerContainer":"_1alIC","alertDangerHeading":"_nqCmj","alertDangerInfo":"_2Qem8"};

var Alert = function Alert(_ref) {
  var txtMainHeading = _ref.txtMainHeading,
      customClassName = _ref.customClassName,
      txtSubHeading = _ref.txtSubHeading,
      alertStyles = _ref.alertStyles;
  return /*#__PURE__*/React.createElement("div", {
    className: alertStyles.alertDangerContainer + " " + customClassName
  }, /*#__PURE__*/React.createElement("span", {
    className: alertStyles.alertDangerHeading
  }, txtMainHeading), /*#__PURE__*/React.createElement("span", {
    className: alertStyles.alertDangerInfo
  }, txtSubHeading));
};

var ReactInternetSpeedMeter = function ReactInternetSpeedMeter(_ref) {
  var _ref$txtMainHeading = _ref.txtMainHeading,
      txtMainHeading = _ref$txtMainHeading === void 0 ? 'Opps...' : _ref$txtMainHeading,
      _ref$outputType = _ref.outputType,
      outputType = _ref$outputType === void 0 ? 'alert' : _ref$outputType,
      customClassName = _ref.customClassName,
      _ref$pingInterval = _ref.pingInterval,
      pingInterval = _ref$pingInterval === void 0 ? 30000 : _ref$pingInterval,
      _ref$thresholdUnit = _ref.thresholdUnit,
      thresholdUnit = _ref$thresholdUnit === void 0 ? 'megabyte' : _ref$thresholdUnit,
      _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === void 0 ? 7 : _ref$threshold,
      _ref$txtSubHeading = _ref.txtSubHeading,
      txtSubHeading = _ref$txtSubHeading === void 0 ? 'Diconnected from internet' : _ref$txtSubHeading,
      imageUrl = _ref.imageUrl,
      downloadSize = _ref.downloadSize,
      _ref$callbackFunction = _ref.callbackFunctionOnNetworkDown,
      callbackFunctionOnNetworkDown = _ref$callbackFunction === void 0 ? function () {
    return console.log('No callback on Network Down');
  } : _ref$callbackFunction,
      _ref$callbackFunction2 = _ref.callbackFunctionOnNetworkTest,
      callbackFunctionOnNetworkTest = _ref$callbackFunction2 === void 0 ? function () {
    return console.log('No callback On Network test');
  } : _ref$callbackFunction2,
      _ref$callbackFunction3 = _ref.callbackFunctionOnError,
      callbackFunctionOnError = _ref$callbackFunction3 === void 0 ? function () {
    return console.log('error in downloading image');
  } : _ref$callbackFunction3;

  var _useState = useState(false),
      isNetworkDown = _useState[0],
      setisNetworkDown = _useState[1];

  var intervalFun;
  window.addEventListener('offline', function () {
    return setisNetworkDown(true);
  });
  window.addEventListener('online', function () {
    return setisNetworkDown(false);
  });

  var startCalculating = function startCalculating() {
    return window.setTimeout(MeasureConnectionSpeed, pingInterval);
  };

  useEffect(function () {
    intervalFun = startCalculating();
    return function () {
      return window.clearInterval(intervalFun);
    };
  }, []);

  var MeasureConnectionSpeed = function MeasureConnectionSpeed() {
    var startTime, endTime;
    var download = new Image();
    startTime = new Date().getTime();
    var cacheBuster = '?nnn=' + startTime;
    download.src = imageUrl + cacheBuster;

    download.onload = function (d) {
      endTime = new Date().getTime();
      showResults(startTime, endTime);
    };

    download.onerror = function (err, msg) {
      console.log('err', err);
      callbackFunctionOnError(err);
      window.clearInterval(intervalFun);
    };

    startCalculating();
  };

  var showResults = function showResults(startTime, endTime) {
    var duration = (endTime - startTime) / 1000;
    var bitsLoaded = downloadSize * 8;
    var speedBps = (bitsLoaded / duration).toFixed(2);
    var speedKbps = (speedBps / 1024).toFixed(2);
    var speedMbps = (speedKbps / 1024).toFixed(2);
    setNetworStatus(speedBps, speedKbps, speedMbps);
  };

  var setNetworStatus = function setNetworStatus(speedBps, speedKbps, speedMbps) {
    if (thresholdUnit === 'byte') {
      if (speedBps < threshold) {
        setisNetworkDown(true);
        callbackFunctionOnNetworkDown(speedBps);
      } else {
        setisNetworkDown(false);
      }

      callbackFunctionOnNetworkTest(speedBps);
    } else if (thresholdUnit === 'kilobyte') {
      if (speedKbps < threshold) {
        setisNetworkDown(true);
        callbackFunctionOnNetworkDown(speedKbps);
      } else {
        setisNetworkDown(false);
      }

      callbackFunctionOnNetworkTest(speedKbps);
    } else if (thresholdUnit === 'megabyte') {
      if (speedMbps < threshold) {
        setisNetworkDown(true);
        callbackFunctionOnNetworkDown(speedMbps);
      } else {
        setisNetworkDown(false);
      }

      callbackFunctionOnNetworkTest(speedMbps);
    } else {
      console.log('Invalid thresholdUnit');
    }
  };

  if (isNetworkDown) {
    if (outputType === 'alert') {
      return /*#__PURE__*/React.createElement(Alert, {
        alertStyles: styles,
        customClassName: customClassName,
        txtMainHeading: txtMainHeading,
        txtSubHeading: txtSubHeading
      });
    }

    return /*#__PURE__*/React.createElement("div", null);
  }

  return /*#__PURE__*/React.createElement("div", null);
};

export { ReactInternetSpeedMeter };
//# sourceMappingURL=index.modern.js.map
